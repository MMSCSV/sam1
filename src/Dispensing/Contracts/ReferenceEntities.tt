<#@ template language="C#" hostspecific="True" debug="False" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#
// <copyright file="ReferenceEntities.tt" company="Microsoft">
//  Copyright Â© Microsoft. All Rights Reserved.
// </copyright>
#>
<#
	StringBuilder referenceTableQuery = new StringBuilder();
	referenceTableQuery.AppendLine("SELECT pk.TABLE_SCHEMA, pk.TABLE_NAME, kcu.COLUMN_NAME, DESCRIPTION_COLUMN_NAME = c.COLUMN_NAME");
	referenceTableQuery.AppendLine("FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS pk");
	referenceTableQuery.AppendLine("INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu ON kcu.TABLE_NAME = pk.TABLE_NAME AND kcu.CONSTRAINT_NAME = pk.CONSTRAINT_NAME");
	referenceTableQuery.AppendLine("LEFT OUTER JOIN (SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'DescriptionText') c ON c.TABLE_SCHEMA = pk.TABLE_SCHEMA AND c.TABLE_NAME = pk.TABLE_NAME");
	referenceTableQuery.AppendLine("WHERE pk.CONSTRAINT_TYPE = 'primary key' AND kcu.COLUMN_NAME LIKE '%InternalCode'");
	referenceTableQuery.AppendLine("ORDER BY pk.TABLE_SCHEMA, pk.TABLE_NAME");
	
	StringBuilder referenceTableColumnsQuery = new StringBuilder();
	referenceTableColumnsQuery.AppendLine("SELECT COLUMN_NAME, DATA_TYPE");
	referenceTableColumnsQuery.AppendLine("FROM INFORMATION_SCHEMA.COLUMNS");
	referenceTableColumnsQuery.AppendLine("WHERE TABLE_SCHEMA = '{0}' AND TABLE_NAME = '{1}'");
	referenceTableColumnsQuery.AppendLine("AND COLUMN_NAME NOT IN ('DescriptionText', 'LastModifiedUTCDateTime', 'LastModifiedBinaryValue')");

	// The following tables will have a ReferenceEntity class generated with it.
	// Provide the SCHEMA_NAME|TABLE_NAME|INTERNALCODE_COLUMN|DESCRIPTION_COLUMN(optional)
	List<string> ignoreReferenceEntityClassTables = new List<string>()
	{
		"Tx|WorkflowEvent|WorkflowEventInternalCode|DescriptionText",
		"Tx|WorkflowStep|WorkflowStepInternalCode|DescriptionText",
		"Core|AuthenticationResult|AuthenticationResultInternalCode|DescriptionText"
	};

	// Renaming
	Dictionary<string, string> nameMappings = new Dictionary<string, string>()
	{
	};
	
	// DataType mappings.
	Dictionary<string, string> dataTypeMappings = new Dictionary<string, string>()
	{
		{"nvarchar", "string"},
        {"varchar", "string"},
        {"char", "string"},
        {"int", "int"},
        {"bigint", "long"},
        {"bit", "bool"},
        {"uniqueidentifier", "Guid"},
		{"varbinary", "byte[]"}
	};

	Func<string, string> MakeValidPropertyName = (name) => 
	{
		// Trim 'Text' from the end.
		if (name.EndsWith("Text"))
		{
			int index = name.LastIndexOf("Text");
			return name.Substring(0, index);
		}
		
		// Trim 'Flag' from the end.
		if (name.EndsWith("Flag"))
		{
			int index = name.LastIndexOf("Flag");
			return name.Substring(0, index);
		}

		return name;
	};

	Func<string, string> MakeValidFieldName = (name) => 
	{
		// Lower case first word if not yet lower case.
		char[] array = name.ToCharArray();
		if (array.Length >= 1)
		{
			if (char.IsUpper(array[0]))
				array[0] = char.ToLower(array[0]);
		}

		name = new string(array);

		return "_" + name;
	};
#>
#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Script template for T4 C# v4.0.
//     Generated at <#=DateTime.Now#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations.Schema;
using Pyxis.Core.Data.InternalCodes;

namespace CareFusion.Dispensing.Contracts
{
<#
	string connectionString = "Data Source=.;Initial Catalog=DSServerOLTP;Integrated Security=True";
	using (SqlConnection connection = new SqlConnection(connectionString))
	{
		SqlCommand command = new SqlCommand(referenceTableQuery.ToString(), connection);
		connection.Open();
		
		SqlDataReader reader = command.ExecuteReader(CommandBehavior.CloseConnection);
		List<string> referenceTables = new List<string>();
		try
		{
			while (reader.Read())
			{
				referenceTables.Add(string.Format("{0}|{1}|{2}|{3}", reader[0], reader[1], reader[2], reader[3]));
			}
		}
		finally
		{
			reader.Close();
		}
		
		// Create reference entity classes.
		bool firstIteration = true;
		foreach (string table in referenceTables)
		{
			if (ignoreReferenceEntityClassTables.Contains(table))
				continue;

			string[] tokens = table.Split('|');
			string schemaName = tokens[0];
			string tableName = tokens[1];
			string tableKeyColumnName = tokens[2];

			PushIndent("\t");
			
			if (!firstIteration)
				WriteLine(null);
			else
				firstIteration = false;
			
			string className = tableName;
			if (nameMappings.ContainsKey(tableName))
				className = nameMappings[tableName];
			
			string enumName = className + "InternalCode";
			string tableKeyColumnFieldName = MakeValidFieldName(tableKeyColumnName);

			WriteLine("#region " + className + " Reference Entity");
			WriteLine(null);
			WriteLine("[Serializable]");
			WriteLine("[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]");
			WriteLine("public partial class " + className + ": ReferenceEntity<" + enumName + ">");
			WriteLine("{");
			PopIndent();
#>
		#region Constructors

		public <#=className#>()
        {
            
        }

        public <#=className#>(string code)
            : base(code)
        {
			<#=tableKeyColumnFieldName#> = code;
        }
		
		public <#=className#>(string code, string description)
            : base(code, description)
        {
			<#=tableKeyColumnFieldName#> = code;
        }
        
        public <#=className#>(<#=enumName#> code)
            : base(code)
        {
			<#=tableKeyColumnFieldName#> = code.ToInternalCode();
        }

        public <#=className#>(<#=enumName#> code, string description)
            : base(code, description)
        {
			<#=tableKeyColumnFieldName#> = code.ToInternalCode();
        }

        public static implicit operator <#=className#>(<#=enumName#> internalCode)
        {
            return FromKey(internalCode);
        }

        public static <#=className#> FromKey(<#=enumName#> internalCode)
        {
            return new <#=className#>(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(<#=className#> other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as <#=className#>);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(<#=className#> left, <#=className#> right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(<#=className#> left, <#=className#> right)
        {
            return !Equals(left, right);
        }

        #endregion
<#			
			command = new SqlCommand(string.Format(referenceTableColumnsQuery.ToString(), schemaName, tableName), connection);
			connection.Open();
			
			reader = command.ExecuteReader(CommandBehavior.CloseConnection);
			try
			{
				if (reader.HasRows)
				{
					WriteLine(null);
					PushIndent("\t\t");
					WriteLine("#region Public Properties");
					WriteLine(null);
				}
				
				while (reader.Read())
				{
					string columnName = reader[0].ToString();
					string dataType = reader[1].ToString();
				
					WriteLine("[DataMember]");
					WriteLine("[Column(\"{0}\")]", columnName);
					if (tableKeyColumnName == columnName)
					{
					    WriteLine("private " + dataTypeMappings[dataType] + " " + tableKeyColumnFieldName + ";");
						WriteLine("public " + dataTypeMappings[dataType] + " " + MakeValidPropertyName(columnName));
						WriteLine("{");
						WriteLine("	get { return " + MakeValidFieldName(columnName) + "; }");
						WriteLine("	set { " + MakeValidFieldName(columnName) + " = value; InternalCode = value.FromInternalCode<" + enumName + ">(); }");
						WriteLine("}");
					}
					else
					{
						WriteLine("public " + dataTypeMappings[dataType] + " " + MakeValidPropertyName(columnName) + " { get; set; }");
					}
					WriteLine(null);
				}
				
				if (reader.HasRows)
				{
					WriteLine("#endregion");
					PopIndent();
				}
			}
			finally
			{
				reader.Close();
			}
			
			PushIndent("\t");
			WriteLine("}");
			WriteLine(null);
			WriteLine("#endregion");
			PopIndent();
		}
	}
#>
}

#pragma warning restore 1591
