#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Script template for T4 C# v4.0.
//     Generated at 02/24/2021 12:19:11
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations.Schema;
using Pyxis.Core.Data.InternalCodes;

namespace CareFusion.Dispensing.Contracts
{
	#region EncounterAdmissionStatus Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class EncounterAdmissionStatus: ReferenceEntity<EncounterAdmissionStatusInternalCode>
	{
		#region Constructors

		public EncounterAdmissionStatus()
        {
            
        }

        public EncounterAdmissionStatus(string code)
            : base(code)
        {
			_encounterAdmissionStatusInternalCode = code;
        }
		
		public EncounterAdmissionStatus(string code, string description)
            : base(code, description)
        {
			_encounterAdmissionStatusInternalCode = code;
        }
        
        public EncounterAdmissionStatus(EncounterAdmissionStatusInternalCode code)
            : base(code)
        {
			_encounterAdmissionStatusInternalCode = code.ToInternalCode();
        }

        public EncounterAdmissionStatus(EncounterAdmissionStatusInternalCode code, string description)
            : base(code, description)
        {
			_encounterAdmissionStatusInternalCode = code.ToInternalCode();
        }

        public static implicit operator EncounterAdmissionStatus(EncounterAdmissionStatusInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static EncounterAdmissionStatus FromKey(EncounterAdmissionStatusInternalCode internalCode)
        {
            return new EncounterAdmissionStatus(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(EncounterAdmissionStatus other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as EncounterAdmissionStatus);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(EncounterAdmissionStatus left, EncounterAdmissionStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EncounterAdmissionStatus left, EncounterAdmissionStatus right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("EncounterAdmissionStatusInternalCode")]
		private string _encounterAdmissionStatusInternalCode;
		public string EncounterAdmissionStatusInternalCode
		{
			get { return _encounterAdmissionStatusInternalCode; }
			set { _encounterAdmissionStatusInternalCode = value; InternalCode = value.FromInternalCode<EncounterAdmissionStatusInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region EncounterPhysicianRole Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class EncounterPhysicianRole: ReferenceEntity<EncounterPhysicianRoleInternalCode>
	{
		#region Constructors

		public EncounterPhysicianRole()
        {
            
        }

        public EncounterPhysicianRole(string code)
            : base(code)
        {
			_encounterPhysicianRoleInternalCode = code;
        }
		
		public EncounterPhysicianRole(string code, string description)
            : base(code, description)
        {
			_encounterPhysicianRoleInternalCode = code;
        }
        
        public EncounterPhysicianRole(EncounterPhysicianRoleInternalCode code)
            : base(code)
        {
			_encounterPhysicianRoleInternalCode = code.ToInternalCode();
        }

        public EncounterPhysicianRole(EncounterPhysicianRoleInternalCode code, string description)
            : base(code, description)
        {
			_encounterPhysicianRoleInternalCode = code.ToInternalCode();
        }

        public static implicit operator EncounterPhysicianRole(EncounterPhysicianRoleInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static EncounterPhysicianRole FromKey(EncounterPhysicianRoleInternalCode internalCode)
        {
            return new EncounterPhysicianRole(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(EncounterPhysicianRole other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as EncounterPhysicianRole);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(EncounterPhysicianRole left, EncounterPhysicianRole right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EncounterPhysicianRole left, EncounterPhysicianRole right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("EncounterPhysicianRoleInternalCode")]
		private string _encounterPhysicianRoleInternalCode;
		public string EncounterPhysicianRoleInternalCode
		{
			get { return _encounterPhysicianRoleInternalCode; }
			set { _encounterPhysicianRoleInternalCode = value; InternalCode = value.FromInternalCode<EncounterPhysicianRoleInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		[DataMember]
		[Column("LastModifiedActorKey")]
		public Guid LastModifiedActorKey { get; set; }

		#endregion
	}

	#endregion

	#region EncounterType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class EncounterType: ReferenceEntity<EncounterTypeInternalCode>
	{
		#region Constructors

		public EncounterType()
        {
            
        }

        public EncounterType(string code)
            : base(code)
        {
			_encounterTypeInternalCode = code;
        }
		
		public EncounterType(string code, string description)
            : base(code, description)
        {
			_encounterTypeInternalCode = code;
        }
        
        public EncounterType(EncounterTypeInternalCode code)
            : base(code)
        {
			_encounterTypeInternalCode = code.ToInternalCode();
        }

        public EncounterType(EncounterTypeInternalCode code, string description)
            : base(code, description)
        {
			_encounterTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator EncounterType(EncounterTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static EncounterType FromKey(EncounterTypeInternalCode internalCode)
        {
            return new EncounterType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(EncounterType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as EncounterType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(EncounterType left, EncounterType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EncounterType left, EncounterType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("EncounterTypeInternalCode")]
		private string _encounterTypeInternalCode;
		public string EncounterTypeInternalCode
		{
			get { return _encounterTypeInternalCode; }
			set { _encounterTypeInternalCode = value; InternalCode = value.FromInternalCode<EncounterTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ClinicalDataAssent Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ClinicalDataAssent: ReferenceEntity<ClinicalDataAssentInternalCode>
	{
		#region Constructors

		public ClinicalDataAssent()
        {
            
        }

        public ClinicalDataAssent(string code)
            : base(code)
        {
			_clinicalDataAssentInternalCode = code;
        }
		
		public ClinicalDataAssent(string code, string description)
            : base(code, description)
        {
			_clinicalDataAssentInternalCode = code;
        }
        
        public ClinicalDataAssent(ClinicalDataAssentInternalCode code)
            : base(code)
        {
			_clinicalDataAssentInternalCode = code.ToInternalCode();
        }

        public ClinicalDataAssent(ClinicalDataAssentInternalCode code, string description)
            : base(code, description)
        {
			_clinicalDataAssentInternalCode = code.ToInternalCode();
        }

        public static implicit operator ClinicalDataAssent(ClinicalDataAssentInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ClinicalDataAssent FromKey(ClinicalDataAssentInternalCode internalCode)
        {
            return new ClinicalDataAssent(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ClinicalDataAssent other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ClinicalDataAssent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ClinicalDataAssent left, ClinicalDataAssent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ClinicalDataAssent left, ClinicalDataAssent right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ClinicalDataAssentInternalCode")]
		private string _clinicalDataAssentInternalCode;
		public string ClinicalDataAssentInternalCode
		{
			get { return _clinicalDataAssentInternalCode; }
			set { _clinicalDataAssentInternalCode = value; InternalCode = value.FromInternalCode<ClinicalDataAssentInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ClinicalDataSubjectType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ClinicalDataSubjectType: ReferenceEntity<ClinicalDataSubjectTypeInternalCode>
	{
		#region Constructors

		public ClinicalDataSubjectType()
        {
            
        }

        public ClinicalDataSubjectType(string code)
            : base(code)
        {
			_clinicalDataSubjectTypeInternalCode = code;
        }
		
		public ClinicalDataSubjectType(string code, string description)
            : base(code, description)
        {
			_clinicalDataSubjectTypeInternalCode = code;
        }
        
        public ClinicalDataSubjectType(ClinicalDataSubjectTypeInternalCode code)
            : base(code)
        {
			_clinicalDataSubjectTypeInternalCode = code.ToInternalCode();
        }

        public ClinicalDataSubjectType(ClinicalDataSubjectTypeInternalCode code, string description)
            : base(code, description)
        {
			_clinicalDataSubjectTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator ClinicalDataSubjectType(ClinicalDataSubjectTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ClinicalDataSubjectType FromKey(ClinicalDataSubjectTypeInternalCode internalCode)
        {
            return new ClinicalDataSubjectType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ClinicalDataSubjectType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ClinicalDataSubjectType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ClinicalDataSubjectType left, ClinicalDataSubjectType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ClinicalDataSubjectType left, ClinicalDataSubjectType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ClinicalDataSubjectTypeInternalCode")]
		private string _clinicalDataSubjectTypeInternalCode;
		public string ClinicalDataSubjectTypeInternalCode
		{
			get { return _clinicalDataSubjectTypeInternalCode; }
			set { _clinicalDataSubjectTypeInternalCode = value; InternalCode = value.FromInternalCode<ClinicalDataSubjectTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ItemConversionIssue Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ItemConversionIssue: ReferenceEntity<ItemConversionIssueInternalCode>
	{
		#region Constructors

		public ItemConversionIssue()
        {
            
        }

        public ItemConversionIssue(string code)
            : base(code)
        {
			_itemConversionIssueInternalCode = code;
        }
		
		public ItemConversionIssue(string code, string description)
            : base(code, description)
        {
			_itemConversionIssueInternalCode = code;
        }
        
        public ItemConversionIssue(ItemConversionIssueInternalCode code)
            : base(code)
        {
			_itemConversionIssueInternalCode = code.ToInternalCode();
        }

        public ItemConversionIssue(ItemConversionIssueInternalCode code, string description)
            : base(code, description)
        {
			_itemConversionIssueInternalCode = code.ToInternalCode();
        }

        public static implicit operator ItemConversionIssue(ItemConversionIssueInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ItemConversionIssue FromKey(ItemConversionIssueInternalCode internalCode)
        {
            return new ItemConversionIssue(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ItemConversionIssue other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ItemConversionIssue);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ItemConversionIssue left, ItemConversionIssue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ItemConversionIssue left, ItemConversionIssue right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ItemConversionIssueInternalCode")]
		private string _itemConversionIssueInternalCode;
		public string ItemConversionIssueInternalCode
		{
			get { return _itemConversionIssueInternalCode; }
			set { _itemConversionIssueInternalCode = value; InternalCode = value.FromInternalCode<ItemConversionIssueInternalCode>(); }
		}

		[DataMember]
		[Column("ErrorFlag")]
		public bool Error { get; set; }

		#endregion
	}

	#endregion

	#region ActiveDirectoryPollStatus Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ActiveDirectoryPollStatus: ReferenceEntity<ActiveDirectoryPollStatusInternalCode>
	{
		#region Constructors

		public ActiveDirectoryPollStatus()
        {
            
        }

        public ActiveDirectoryPollStatus(string code)
            : base(code)
        {
			_activeDirectoryPollStatusInternalCode = code;
        }
		
		public ActiveDirectoryPollStatus(string code, string description)
            : base(code, description)
        {
			_activeDirectoryPollStatusInternalCode = code;
        }
        
        public ActiveDirectoryPollStatus(ActiveDirectoryPollStatusInternalCode code)
            : base(code)
        {
			_activeDirectoryPollStatusInternalCode = code.ToInternalCode();
        }

        public ActiveDirectoryPollStatus(ActiveDirectoryPollStatusInternalCode code, string description)
            : base(code, description)
        {
			_activeDirectoryPollStatusInternalCode = code.ToInternalCode();
        }

        public static implicit operator ActiveDirectoryPollStatus(ActiveDirectoryPollStatusInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ActiveDirectoryPollStatus FromKey(ActiveDirectoryPollStatusInternalCode internalCode)
        {
            return new ActiveDirectoryPollStatus(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ActiveDirectoryPollStatus other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ActiveDirectoryPollStatus);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ActiveDirectoryPollStatus left, ActiveDirectoryPollStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ActiveDirectoryPollStatus left, ActiveDirectoryPollStatus right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ActiveDirectoryPollStatusInternalCode")]
		private string _activeDirectoryPollStatusInternalCode;
		public string ActiveDirectoryPollStatusInternalCode
		{
			get { return _activeDirectoryPollStatusInternalCode; }
			set { _activeDirectoryPollStatusInternalCode = value; InternalCode = value.FromInternalCode<ActiveDirectoryPollStatusInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region AuthenticationFailureReason Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class AuthenticationFailureReason: ReferenceEntity<AuthenticationFailureReasonInternalCode>
	{
		#region Constructors

		public AuthenticationFailureReason()
        {
            
        }

        public AuthenticationFailureReason(string code)
            : base(code)
        {
			_authenticationFailureReasonInternalCode = code;
        }
		
		public AuthenticationFailureReason(string code, string description)
            : base(code, description)
        {
			_authenticationFailureReasonInternalCode = code;
        }
        
        public AuthenticationFailureReason(AuthenticationFailureReasonInternalCode code)
            : base(code)
        {
			_authenticationFailureReasonInternalCode = code.ToInternalCode();
        }

        public AuthenticationFailureReason(AuthenticationFailureReasonInternalCode code, string description)
            : base(code, description)
        {
			_authenticationFailureReasonInternalCode = code.ToInternalCode();
        }

        public static implicit operator AuthenticationFailureReason(AuthenticationFailureReasonInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static AuthenticationFailureReason FromKey(AuthenticationFailureReasonInternalCode internalCode)
        {
            return new AuthenticationFailureReason(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(AuthenticationFailureReason other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as AuthenticationFailureReason);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(AuthenticationFailureReason left, AuthenticationFailureReason right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AuthenticationFailureReason left, AuthenticationFailureReason right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("AuthenticationFailureReasonInternalCode")]
		private string _authenticationFailureReasonInternalCode;
		public string AuthenticationFailureReasonInternalCode
		{
			get { return _authenticationFailureReasonInternalCode; }
			set { _authenticationFailureReasonInternalCode = value; InternalCode = value.FromInternalCode<AuthenticationFailureReasonInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region AuthenticationMethod Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class AuthenticationMethod: ReferenceEntity<AuthenticationMethodInternalCode>
	{
		#region Constructors

		public AuthenticationMethod()
        {
            
        }

        public AuthenticationMethod(string code)
            : base(code)
        {
			_authenticationMethodInternalCode = code;
        }
		
		public AuthenticationMethod(string code, string description)
            : base(code, description)
        {
			_authenticationMethodInternalCode = code;
        }
        
        public AuthenticationMethod(AuthenticationMethodInternalCode code)
            : base(code)
        {
			_authenticationMethodInternalCode = code.ToInternalCode();
        }

        public AuthenticationMethod(AuthenticationMethodInternalCode code, string description)
            : base(code, description)
        {
			_authenticationMethodInternalCode = code.ToInternalCode();
        }

        public static implicit operator AuthenticationMethod(AuthenticationMethodInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static AuthenticationMethod FromKey(AuthenticationMethodInternalCode internalCode)
        {
            return new AuthenticationMethod(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(AuthenticationMethod other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as AuthenticationMethod);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(AuthenticationMethod left, AuthenticationMethod right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AuthenticationMethod left, AuthenticationMethod right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("AuthenticationMethodInternalCode")]
		private string _authenticationMethodInternalCode;
		public string AuthenticationMethodInternalCode
		{
			get { return _authenticationMethodInternalCode; }
			set { _authenticationMethodInternalCode = value; InternalCode = value.FromInternalCode<AuthenticationMethodInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region AuthenticationPurpose Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class AuthenticationPurpose: ReferenceEntity<AuthenticationPurposeInternalCode>
	{
		#region Constructors

		public AuthenticationPurpose()
        {
            
        }

        public AuthenticationPurpose(string code)
            : base(code)
        {
			_authenticationPurposeInternalCode = code;
        }
		
		public AuthenticationPurpose(string code, string description)
            : base(code, description)
        {
			_authenticationPurposeInternalCode = code;
        }
        
        public AuthenticationPurpose(AuthenticationPurposeInternalCode code)
            : base(code)
        {
			_authenticationPurposeInternalCode = code.ToInternalCode();
        }

        public AuthenticationPurpose(AuthenticationPurposeInternalCode code, string description)
            : base(code, description)
        {
			_authenticationPurposeInternalCode = code.ToInternalCode();
        }

        public static implicit operator AuthenticationPurpose(AuthenticationPurposeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static AuthenticationPurpose FromKey(AuthenticationPurposeInternalCode internalCode)
        {
            return new AuthenticationPurpose(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(AuthenticationPurpose other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as AuthenticationPurpose);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(AuthenticationPurpose left, AuthenticationPurpose right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AuthenticationPurpose left, AuthenticationPurpose right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("AuthenticationPurposeInternalCode")]
		private string _authenticationPurposeInternalCode;
		public string AuthenticationPurposeInternalCode
		{
			get { return _authenticationPurposeInternalCode; }
			set { _authenticationPurposeInternalCode = value; InternalCode = value.FromInternalCode<AuthenticationPurposeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region BusinessDomain Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class BusinessDomain: ReferenceEntity<BusinessDomainInternalCode>
	{
		#region Constructors

		public BusinessDomain()
        {
            
        }

        public BusinessDomain(string code)
            : base(code)
        {
			_businessDomainInternalCode = code;
        }
		
		public BusinessDomain(string code, string description)
            : base(code, description)
        {
			_businessDomainInternalCode = code;
        }
        
        public BusinessDomain(BusinessDomainInternalCode code)
            : base(code)
        {
			_businessDomainInternalCode = code.ToInternalCode();
        }

        public BusinessDomain(BusinessDomainInternalCode code, string description)
            : base(code, description)
        {
			_businessDomainInternalCode = code.ToInternalCode();
        }

        public static implicit operator BusinessDomain(BusinessDomainInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static BusinessDomain FromKey(BusinessDomainInternalCode internalCode)
        {
            return new BusinessDomain(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(BusinessDomain other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as BusinessDomain);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(BusinessDomain left, BusinessDomain right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BusinessDomain left, BusinessDomain right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("BusinessDomainInternalCode")]
		private string _businessDomainInternalCode;
		public string BusinessDomainInternalCode
		{
			get { return _businessDomainInternalCode; }
			set { _businessDomainInternalCode = value; InternalCode = value.FromInternalCode<BusinessDomainInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ContactMethod Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ContactMethod: ReferenceEntity<ContactMethodInternalCode>
	{
		#region Constructors

		public ContactMethod()
        {
            
        }

        public ContactMethod(string code)
            : base(code)
        {
			_contactMethodInternalCode = code;
        }
		
		public ContactMethod(string code, string description)
            : base(code, description)
        {
			_contactMethodInternalCode = code;
        }
        
        public ContactMethod(ContactMethodInternalCode code)
            : base(code)
        {
			_contactMethodInternalCode = code.ToInternalCode();
        }

        public ContactMethod(ContactMethodInternalCode code, string description)
            : base(code, description)
        {
			_contactMethodInternalCode = code.ToInternalCode();
        }

        public static implicit operator ContactMethod(ContactMethodInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ContactMethod FromKey(ContactMethodInternalCode internalCode)
        {
            return new ContactMethod(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ContactMethod other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ContactMethod);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ContactMethod left, ContactMethod right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContactMethod left, ContactMethod right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ContactMethodInternalCode")]
		private string _contactMethodInternalCode;
		public string ContactMethodInternalCode
		{
			get { return _contactMethodInternalCode; }
			set { _contactMethodInternalCode = value; InternalCode = value.FromInternalCode<ContactMethodInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region DateTimePrecision Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class DateTimePrecision: ReferenceEntity<DateTimePrecisionInternalCode>
	{
		#region Constructors

		public DateTimePrecision()
        {
            
        }

        public DateTimePrecision(string code)
            : base(code)
        {
			_dateTimePrecisionInternalCode = code;
        }
		
		public DateTimePrecision(string code, string description)
            : base(code, description)
        {
			_dateTimePrecisionInternalCode = code;
        }
        
        public DateTimePrecision(DateTimePrecisionInternalCode code)
            : base(code)
        {
			_dateTimePrecisionInternalCode = code.ToInternalCode();
        }

        public DateTimePrecision(DateTimePrecisionInternalCode code, string description)
            : base(code, description)
        {
			_dateTimePrecisionInternalCode = code.ToInternalCode();
        }

        public static implicit operator DateTimePrecision(DateTimePrecisionInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static DateTimePrecision FromKey(DateTimePrecisionInternalCode internalCode)
        {
            return new DateTimePrecision(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(DateTimePrecision other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as DateTimePrecision);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(DateTimePrecision left, DateTimePrecision right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DateTimePrecision left, DateTimePrecision right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("DateTimePrecisionInternalCode")]
		private string _dateTimePrecisionInternalCode;
		public string DateTimePrecisionInternalCode
		{
			get { return _dateTimePrecisionInternalCode; }
			set { _dateTimePrecisionInternalCode = value; InternalCode = value.FromInternalCode<DateTimePrecisionInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region EncryptionAlgorithm Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class EncryptionAlgorithm: ReferenceEntity<EncryptionAlgorithmInternalCode>
	{
		#region Constructors

		public EncryptionAlgorithm()
        {
            
        }

        public EncryptionAlgorithm(string code)
            : base(code)
        {
			_encryptionAlgorithmInternalCode = code;
        }
		
		public EncryptionAlgorithm(string code, string description)
            : base(code, description)
        {
			_encryptionAlgorithmInternalCode = code;
        }
        
        public EncryptionAlgorithm(EncryptionAlgorithmInternalCode code)
            : base(code)
        {
			_encryptionAlgorithmInternalCode = code.ToInternalCode();
        }

        public EncryptionAlgorithm(EncryptionAlgorithmInternalCode code, string description)
            : base(code, description)
        {
			_encryptionAlgorithmInternalCode = code.ToInternalCode();
        }

        public static implicit operator EncryptionAlgorithm(EncryptionAlgorithmInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static EncryptionAlgorithm FromKey(EncryptionAlgorithmInternalCode internalCode)
        {
            return new EncryptionAlgorithm(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(EncryptionAlgorithm other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as EncryptionAlgorithm);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(EncryptionAlgorithm left, EncryptionAlgorithm right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EncryptionAlgorithm left, EncryptionAlgorithm right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("EncryptionAlgorithmInternalCode")]
		private string _encryptionAlgorithmInternalCode;
		public string EncryptionAlgorithmInternalCode
		{
			get { return _encryptionAlgorithmInternalCode; }
			set { _encryptionAlgorithmInternalCode = value; InternalCode = value.FromInternalCode<EncryptionAlgorithmInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ObservationMethod Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ObservationMethod: ReferenceEntity<ObservationMethodInternalCode>
	{
		#region Constructors

		public ObservationMethod()
        {
            
        }

        public ObservationMethod(string code)
            : base(code)
        {
			_observationMethodInternalCode = code;
        }
		
		public ObservationMethod(string code, string description)
            : base(code, description)
        {
			_observationMethodInternalCode = code;
        }
        
        public ObservationMethod(ObservationMethodInternalCode code)
            : base(code)
        {
			_observationMethodInternalCode = code.ToInternalCode();
        }

        public ObservationMethod(ObservationMethodInternalCode code, string description)
            : base(code, description)
        {
			_observationMethodInternalCode = code.ToInternalCode();
        }

        public static implicit operator ObservationMethod(ObservationMethodInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ObservationMethod FromKey(ObservationMethodInternalCode internalCode)
        {
            return new ObservationMethod(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ObservationMethod other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ObservationMethod);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ObservationMethod left, ObservationMethod right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ObservationMethod left, ObservationMethod right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ObservationMethodInternalCode")]
		private string _observationMethodInternalCode;
		public string ObservationMethodInternalCode
		{
			get { return _observationMethodInternalCode; }
			set { _observationMethodInternalCode = value; InternalCode = value.FromInternalCode<ObservationMethodInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region PatientCareFunction Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class PatientCareFunction: ReferenceEntity<PatientCareFunctionInternalCode>
	{
		#region Constructors

		public PatientCareFunction()
        {
            
        }

        public PatientCareFunction(string code)
            : base(code)
        {
			_patientCareFunctionInternalCode = code;
        }
		
		public PatientCareFunction(string code, string description)
            : base(code, description)
        {
			_patientCareFunctionInternalCode = code;
        }
        
        public PatientCareFunction(PatientCareFunctionInternalCode code)
            : base(code)
        {
			_patientCareFunctionInternalCode = code.ToInternalCode();
        }

        public PatientCareFunction(PatientCareFunctionInternalCode code, string description)
            : base(code, description)
        {
			_patientCareFunctionInternalCode = code.ToInternalCode();
        }

        public static implicit operator PatientCareFunction(PatientCareFunctionInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static PatientCareFunction FromKey(PatientCareFunctionInternalCode internalCode)
        {
            return new PatientCareFunction(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(PatientCareFunction other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as PatientCareFunction);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(PatientCareFunction left, PatientCareFunction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PatientCareFunction left, PatientCareFunction right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("PatientCareFunctionInternalCode")]
		private string _patientCareFunctionInternalCode;
		public string PatientCareFunctionInternalCode
		{
			get { return _patientCareFunctionInternalCode; }
			set { _patientCareFunctionInternalCode = value; InternalCode = value.FromInternalCode<PatientCareFunctionInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region Permission Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class Permission: ReferenceEntity<PermissionInternalCode>
	{
		#region Constructors

		public Permission()
        {
            
        }

        public Permission(string code)
            : base(code)
        {
			_permissionInternalCode = code;
        }
		
		public Permission(string code, string description)
            : base(code, description)
        {
			_permissionInternalCode = code;
        }
        
        public Permission(PermissionInternalCode code)
            : base(code)
        {
			_permissionInternalCode = code.ToInternalCode();
        }

        public Permission(PermissionInternalCode code, string description)
            : base(code, description)
        {
			_permissionInternalCode = code.ToInternalCode();
        }

        public static implicit operator Permission(PermissionInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static Permission FromKey(PermissionInternalCode internalCode)
        {
            return new Permission(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(Permission other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as Permission);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(Permission left, Permission right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Permission left, Permission right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("PermissionInternalCode")]
		private string _permissionInternalCode;
		public string PermissionInternalCode
		{
			get { return _permissionInternalCode; }
			set { _permissionInternalCode = value; InternalCode = value.FromInternalCode<PermissionInternalCode>(); }
		}

		[DataMember]
		[Column("PermissionTypeInternalCode")]
		public string PermissionTypeInternalCode { get; set; }

		[DataMember]
		[Column("PermissionName")]
		public string PermissionName { get; set; }

		[DataMember]
		[Column("SupportUserOnlyFlag")]
		public bool SupportUserOnly { get; set; }

		[DataMember]
		[Column("SecurityGroupApplicableFlag")]
		public bool SecurityGroupApplicable { get; set; }

		[DataMember]
		[Column("HideFlag")]
		public bool Hide { get; set; }

		[DataMember]
		[Column("DeleteFlag")]
		public bool Delete { get; set; }

		[DataMember]
		[Column("VersionText")]
		public string Version { get; set; }

		[DataMember]
		[Column("ESSystemFlag")]
		public bool ESSystem { get; set; }

		[DataMember]
		[Column("PharmogisticsFlag")]
		public bool Pharmogistics { get; set; }

		[DataMember]
		[Column("GCSMFlag")]
		public bool GCSM { get; set; }

		#endregion
	}

	#endregion

	#region PermissionType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class PermissionType: ReferenceEntity<PermissionTypeInternalCode>
	{
		#region Constructors

		public PermissionType()
        {
            
        }

        public PermissionType(string code)
            : base(code)
        {
			_permissionTypeInternalCode = code;
        }
		
		public PermissionType(string code, string description)
            : base(code, description)
        {
			_permissionTypeInternalCode = code;
        }
        
        public PermissionType(PermissionTypeInternalCode code)
            : base(code)
        {
			_permissionTypeInternalCode = code.ToInternalCode();
        }

        public PermissionType(PermissionTypeInternalCode code, string description)
            : base(code, description)
        {
			_permissionTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator PermissionType(PermissionTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static PermissionType FromKey(PermissionTypeInternalCode internalCode)
        {
            return new PermissionType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(PermissionType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as PermissionType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(PermissionType left, PermissionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PermissionType left, PermissionType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("PermissionTypeInternalCode")]
		private string _permissionTypeInternalCode;
		public string PermissionTypeInternalCode
		{
			get { return _permissionTypeInternalCode; }
			set { _permissionTypeInternalCode = value; InternalCode = value.FromInternalCode<PermissionTypeInternalCode>(); }
		}

		[DataMember]
		[Column("DeleteFlag")]
		public bool Delete { get; set; }

		#endregion
	}

	#endregion

	#region ProductGeneration Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ProductGeneration: ReferenceEntity<ProductGenerationInternalCode>
	{
		#region Constructors

		public ProductGeneration()
        {
            
        }

        public ProductGeneration(string code)
            : base(code)
        {
			_productGenerationInternalCode = code;
        }
		
		public ProductGeneration(string code, string description)
            : base(code, description)
        {
			_productGenerationInternalCode = code;
        }
        
        public ProductGeneration(ProductGenerationInternalCode code)
            : base(code)
        {
			_productGenerationInternalCode = code.ToInternalCode();
        }

        public ProductGeneration(ProductGenerationInternalCode code, string description)
            : base(code, description)
        {
			_productGenerationInternalCode = code.ToInternalCode();
        }

        public static implicit operator ProductGeneration(ProductGenerationInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ProductGeneration FromKey(ProductGenerationInternalCode internalCode)
        {
            return new ProductGeneration(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ProductGeneration other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ProductGeneration);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ProductGeneration left, ProductGeneration right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductGeneration left, ProductGeneration right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ProductGenerationInternalCode")]
		private string _productGenerationInternalCode;
		public string ProductGenerationInternalCode
		{
			get { return _productGenerationInternalCode; }
			set { _productGenerationInternalCode = value; InternalCode = value.FromInternalCode<ProductGenerationInternalCode>(); }
		}

		[DataMember]
		[Column("DisplayCode")]
		public string DisplayCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ServiceTask Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ServiceTask: ReferenceEntity<ServiceTaskInternalCode>
	{
		#region Constructors

		public ServiceTask()
        {
            
        }

        public ServiceTask(string code)
            : base(code)
        {
			_serviceTaskInternalCode = code;
        }
		
		public ServiceTask(string code, string description)
            : base(code, description)
        {
			_serviceTaskInternalCode = code;
        }
        
        public ServiceTask(ServiceTaskInternalCode code)
            : base(code)
        {
			_serviceTaskInternalCode = code.ToInternalCode();
        }

        public ServiceTask(ServiceTaskInternalCode code, string description)
            : base(code, description)
        {
			_serviceTaskInternalCode = code.ToInternalCode();
        }

        public static implicit operator ServiceTask(ServiceTaskInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ServiceTask FromKey(ServiceTaskInternalCode internalCode)
        {
            return new ServiceTask(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ServiceTask other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ServiceTask);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ServiceTask left, ServiceTask right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServiceTask left, ServiceTask right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ServiceTaskInternalCode")]
		private string _serviceTaskInternalCode;
		public string ServiceTaskInternalCode
		{
			get { return _serviceTaskInternalCode; }
			set { _serviceTaskInternalCode = value; InternalCode = value.FromInternalCode<ServiceTaskInternalCode>(); }
		}

		[DataMember]
		[Column("SystemServiceInternalCode")]
		public string SystemServiceInternalCode { get; set; }

		#endregion
	}

	#endregion

	#region SignOutReason Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SignOutReason: ReferenceEntity<SignOutReasonInternalCode>
	{
		#region Constructors

		public SignOutReason()
        {
            
        }

        public SignOutReason(string code)
            : base(code)
        {
			_signOutReasonInternalCode = code;
        }
		
		public SignOutReason(string code, string description)
            : base(code, description)
        {
			_signOutReasonInternalCode = code;
        }
        
        public SignOutReason(SignOutReasonInternalCode code)
            : base(code)
        {
			_signOutReasonInternalCode = code.ToInternalCode();
        }

        public SignOutReason(SignOutReasonInternalCode code, string description)
            : base(code, description)
        {
			_signOutReasonInternalCode = code.ToInternalCode();
        }

        public static implicit operator SignOutReason(SignOutReasonInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SignOutReason FromKey(SignOutReasonInternalCode internalCode)
        {
            return new SignOutReason(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SignOutReason other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SignOutReason);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SignOutReason left, SignOutReason right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SignOutReason left, SignOutReason right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SignOutReasonInternalCode")]
		private string _signOutReasonInternalCode;
		public string SignOutReasonInternalCode
		{
			get { return _signOutReasonInternalCode; }
			set { _signOutReasonInternalCode = value; InternalCode = value.FromInternalCode<SignOutReasonInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region StandardUserType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class StandardUserType: ReferenceEntity<StandardUserTypeInternalCode>
	{
		#region Constructors

		public StandardUserType()
        {
            
        }

        public StandardUserType(string code)
            : base(code)
        {
			_standardUserTypeInternalCode = code;
        }
		
		public StandardUserType(string code, string description)
            : base(code, description)
        {
			_standardUserTypeInternalCode = code;
        }
        
        public StandardUserType(StandardUserTypeInternalCode code)
            : base(code)
        {
			_standardUserTypeInternalCode = code.ToInternalCode();
        }

        public StandardUserType(StandardUserTypeInternalCode code, string description)
            : base(code, description)
        {
			_standardUserTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator StandardUserType(StandardUserTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static StandardUserType FromKey(StandardUserTypeInternalCode internalCode)
        {
            return new StandardUserType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(StandardUserType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as StandardUserType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(StandardUserType left, StandardUserType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StandardUserType left, StandardUserType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("StandardUserTypeInternalCode")]
		private string _standardUserTypeInternalCode;
		public string StandardUserTypeInternalCode
		{
			get { return _standardUserTypeInternalCode; }
			set { _standardUserTypeInternalCode = value; InternalCode = value.FromInternalCode<StandardUserTypeInternalCode>(); }
		}

		[DataMember]
		[Column("DisplayCode")]
		public string DisplayCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region SystemApplication Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SystemApplication: ReferenceEntity<SystemApplicationInternalCode>
	{
		#region Constructors

		public SystemApplication()
        {
            
        }

        public SystemApplication(string code)
            : base(code)
        {
			_systemApplicationInternalCode = code;
        }
		
		public SystemApplication(string code, string description)
            : base(code, description)
        {
			_systemApplicationInternalCode = code;
        }
        
        public SystemApplication(SystemApplicationInternalCode code)
            : base(code)
        {
			_systemApplicationInternalCode = code.ToInternalCode();
        }

        public SystemApplication(SystemApplicationInternalCode code, string description)
            : base(code, description)
        {
			_systemApplicationInternalCode = code.ToInternalCode();
        }

        public static implicit operator SystemApplication(SystemApplicationInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SystemApplication FromKey(SystemApplicationInternalCode internalCode)
        {
            return new SystemApplication(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SystemApplication other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SystemApplication);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SystemApplication left, SystemApplication right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SystemApplication left, SystemApplication right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SystemApplicationInternalCode")]
		private string _systemApplicationInternalCode;
		public string SystemApplicationInternalCode
		{
			get { return _systemApplicationInternalCode; }
			set { _systemApplicationInternalCode = value; InternalCode = value.FromInternalCode<SystemApplicationInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region SystemConfigCategory Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SystemConfigCategory: ReferenceEntity<SystemConfigCategoryInternalCode>
	{
		#region Constructors

		public SystemConfigCategory()
        {
            
        }

        public SystemConfigCategory(string code)
            : base(code)
        {
			_systemConfigCategoryInternalCode = code;
        }
		
		public SystemConfigCategory(string code, string description)
            : base(code, description)
        {
			_systemConfigCategoryInternalCode = code;
        }
        
        public SystemConfigCategory(SystemConfigCategoryInternalCode code)
            : base(code)
        {
			_systemConfigCategoryInternalCode = code.ToInternalCode();
        }

        public SystemConfigCategory(SystemConfigCategoryInternalCode code, string description)
            : base(code, description)
        {
			_systemConfigCategoryInternalCode = code.ToInternalCode();
        }

        public static implicit operator SystemConfigCategory(SystemConfigCategoryInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SystemConfigCategory FromKey(SystemConfigCategoryInternalCode internalCode)
        {
            return new SystemConfigCategory(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SystemConfigCategory other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SystemConfigCategory);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SystemConfigCategory left, SystemConfigCategory right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SystemConfigCategory left, SystemConfigCategory right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SystemConfigCategoryInternalCode")]
		private string _systemConfigCategoryInternalCode;
		public string SystemConfigCategoryInternalCode
		{
			get { return _systemConfigCategoryInternalCode; }
			set { _systemConfigCategoryInternalCode = value; InternalCode = value.FromInternalCode<SystemConfigCategoryInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region SystemConfigType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SystemConfigType: ReferenceEntity<SystemConfigTypeInternalCode>
	{
		#region Constructors

		public SystemConfigType()
        {
            
        }

        public SystemConfigType(string code)
            : base(code)
        {
			_systemConfigTypeInternalCode = code;
        }
		
		public SystemConfigType(string code, string description)
            : base(code, description)
        {
			_systemConfigTypeInternalCode = code;
        }
        
        public SystemConfigType(SystemConfigTypeInternalCode code)
            : base(code)
        {
			_systemConfigTypeInternalCode = code.ToInternalCode();
        }

        public SystemConfigType(SystemConfigTypeInternalCode code, string description)
            : base(code, description)
        {
			_systemConfigTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator SystemConfigType(SystemConfigTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SystemConfigType FromKey(SystemConfigTypeInternalCode internalCode)
        {
            return new SystemConfigType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SystemConfigType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SystemConfigType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SystemConfigType left, SystemConfigType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SystemConfigType left, SystemConfigType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SystemConfigTypeInternalCode")]
		private string _systemConfigTypeInternalCode;
		public string SystemConfigTypeInternalCode
		{
			get { return _systemConfigTypeInternalCode; }
			set { _systemConfigTypeInternalCode = value; InternalCode = value.FromInternalCode<SystemConfigTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SystemConfigCategoryInternalCode")]
		public string SystemConfigCategoryInternalCode { get; set; }

		[DataMember]
		[Column("SystemConfigTypeName")]
		public string SystemConfigTypeName { get; set; }

		[DataMember]
		[Column("DataTypeInternalCode")]
		public string DataTypeInternalCode { get; set; }

		[DataMember]
		[Column("DefaultValue")]
		public string DefaultValue { get; set; }

		[DataMember]
		[Column("DispensingSystemFlag")]
		public bool DispensingSystem { get; set; }

		[DataMember]
		[Column("FacilityFlag")]
		public bool Facility { get; set; }

		[DataMember]
		[Column("ServerFlag")]
		public bool Server { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		[DataMember]
		[Column("HideFlag")]
		public bool Hide { get; set; }

		[DataMember]
		[Column("DeleteFlag")]
		public bool Delete { get; set; }

		#endregion
	}

	#endregion

	#region SystemProcess Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SystemProcess: ReferenceEntity<SystemProcessInternalCode>
	{
		#region Constructors

		public SystemProcess()
        {
            
        }

        public SystemProcess(string code)
            : base(code)
        {
			_systemProcessInternalCode = code;
        }
		
		public SystemProcess(string code, string description)
            : base(code, description)
        {
			_systemProcessInternalCode = code;
        }
        
        public SystemProcess(SystemProcessInternalCode code)
            : base(code)
        {
			_systemProcessInternalCode = code.ToInternalCode();
        }

        public SystemProcess(SystemProcessInternalCode code, string description)
            : base(code, description)
        {
			_systemProcessInternalCode = code.ToInternalCode();
        }

        public static implicit operator SystemProcess(SystemProcessInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SystemProcess FromKey(SystemProcessInternalCode internalCode)
        {
            return new SystemProcess(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SystemProcess other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SystemProcess);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SystemProcess left, SystemProcess right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SystemProcess left, SystemProcess right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SystemProcessInternalCode")]
		private string _systemProcessInternalCode;
		public string SystemProcessInternalCode
		{
			get { return _systemProcessInternalCode; }
			set { _systemProcessInternalCode = value; InternalCode = value.FromInternalCode<SystemProcessInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region SystemService Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SystemService: ReferenceEntity<SystemServiceInternalCode>
	{
		#region Constructors

		public SystemService()
        {
            
        }

        public SystemService(string code)
            : base(code)
        {
			_systemServiceInternalCode = code;
        }
		
		public SystemService(string code, string description)
            : base(code, description)
        {
			_systemServiceInternalCode = code;
        }
        
        public SystemService(SystemServiceInternalCode code)
            : base(code)
        {
			_systemServiceInternalCode = code.ToInternalCode();
        }

        public SystemService(SystemServiceInternalCode code, string description)
            : base(code, description)
        {
			_systemServiceInternalCode = code.ToInternalCode();
        }

        public static implicit operator SystemService(SystemServiceInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SystemService FromKey(SystemServiceInternalCode internalCode)
        {
            return new SystemService(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SystemService other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SystemService);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SystemService left, SystemService right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SystemService left, SystemService right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SystemServiceInternalCode")]
		private string _systemServiceInternalCode;
		public string SystemServiceInternalCode
		{
			get { return _systemServiceInternalCode; }
			set { _systemServiceInternalCode = value; InternalCode = value.FromInternalCode<SystemServiceInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region UnitOfDuration Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class UnitOfDuration: ReferenceEntity<UnitOfDurationInternalCode>
	{
		#region Constructors

		public UnitOfDuration()
        {
            
        }

        public UnitOfDuration(string code)
            : base(code)
        {
			_unitOfDurationInternalCode = code;
        }
		
		public UnitOfDuration(string code, string description)
            : base(code, description)
        {
			_unitOfDurationInternalCode = code;
        }
        
        public UnitOfDuration(UnitOfDurationInternalCode code)
            : base(code)
        {
			_unitOfDurationInternalCode = code.ToInternalCode();
        }

        public UnitOfDuration(UnitOfDurationInternalCode code, string description)
            : base(code, description)
        {
			_unitOfDurationInternalCode = code.ToInternalCode();
        }

        public static implicit operator UnitOfDuration(UnitOfDurationInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static UnitOfDuration FromKey(UnitOfDurationInternalCode internalCode)
        {
            return new UnitOfDuration(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(UnitOfDuration other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as UnitOfDuration);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(UnitOfDuration left, UnitOfDuration right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UnitOfDuration left, UnitOfDuration right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("UnitOfDurationInternalCode")]
		private string _unitOfDurationInternalCode;
		public string UnitOfDurationInternalCode
		{
			get { return _unitOfDurationInternalCode; }
			set { _unitOfDurationInternalCode = value; InternalCode = value.FromInternalCode<UnitOfDurationInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region UnitOfTemperature Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class UnitOfTemperature: ReferenceEntity<UnitOfTemperatureInternalCode>
	{
		#region Constructors

		public UnitOfTemperature()
        {
            
        }

        public UnitOfTemperature(string code)
            : base(code)
        {
			_unitOfTemperatureInternalCode = code;
        }
		
		public UnitOfTemperature(string code, string description)
            : base(code, description)
        {
			_unitOfTemperatureInternalCode = code;
        }
        
        public UnitOfTemperature(UnitOfTemperatureInternalCode code)
            : base(code)
        {
			_unitOfTemperatureInternalCode = code.ToInternalCode();
        }

        public UnitOfTemperature(UnitOfTemperatureInternalCode code, string description)
            : base(code, description)
        {
			_unitOfTemperatureInternalCode = code.ToInternalCode();
        }

        public static implicit operator UnitOfTemperature(UnitOfTemperatureInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static UnitOfTemperature FromKey(UnitOfTemperatureInternalCode internalCode)
        {
            return new UnitOfTemperature(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(UnitOfTemperature other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as UnitOfTemperature);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(UnitOfTemperature left, UnitOfTemperature right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UnitOfTemperature left, UnitOfTemperature right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("UnitOfTemperatureInternalCode")]
		private string _unitOfTemperatureInternalCode;
		public string UnitOfTemperatureInternalCode
		{
			get { return _unitOfTemperatureInternalCode; }
			set { _unitOfTemperatureInternalCode = value; InternalCode = value.FromInternalCode<UnitOfTemperatureInternalCode>(); }
		}

		[DataMember]
		[Column("DisplayCode")]
		public string DisplayCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region UOMRole Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class UOMRole: ReferenceEntity<UOMRoleInternalCode>
	{
		#region Constructors

		public UOMRole()
        {
            
        }

        public UOMRole(string code)
            : base(code)
        {
			_uOMRoleInternalCode = code;
        }
		
		public UOMRole(string code, string description)
            : base(code, description)
        {
			_uOMRoleInternalCode = code;
        }
        
        public UOMRole(UOMRoleInternalCode code)
            : base(code)
        {
			_uOMRoleInternalCode = code.ToInternalCode();
        }

        public UOMRole(UOMRoleInternalCode code, string description)
            : base(code, description)
        {
			_uOMRoleInternalCode = code.ToInternalCode();
        }

        public static implicit operator UOMRole(UOMRoleInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static UOMRole FromKey(UOMRoleInternalCode internalCode)
        {
            return new UOMRole(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(UOMRole other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as UOMRole);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(UOMRole left, UOMRole right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UOMRole left, UOMRole right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("UOMRoleInternalCode")]
		private string _uOMRoleInternalCode;
		public string UOMRoleInternalCode
		{
			get { return _uOMRoleInternalCode; }
			set { _uOMRoleInternalCode = value; InternalCode = value.FromInternalCode<UOMRoleInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region UserDirectoryType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class UserDirectoryType: ReferenceEntity<UserDirectoryTypeInternalCode>
	{
		#region Constructors

		public UserDirectoryType()
        {
            
        }

        public UserDirectoryType(string code)
            : base(code)
        {
			_userDirectoryTypeInternalCode = code;
        }
		
		public UserDirectoryType(string code, string description)
            : base(code, description)
        {
			_userDirectoryTypeInternalCode = code;
        }
        
        public UserDirectoryType(UserDirectoryTypeInternalCode code)
            : base(code)
        {
			_userDirectoryTypeInternalCode = code.ToInternalCode();
        }

        public UserDirectoryType(UserDirectoryTypeInternalCode code, string description)
            : base(code, description)
        {
			_userDirectoryTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator UserDirectoryType(UserDirectoryTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static UserDirectoryType FromKey(UserDirectoryTypeInternalCode internalCode)
        {
            return new UserDirectoryType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(UserDirectoryType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as UserDirectoryType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(UserDirectoryType left, UserDirectoryType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserDirectoryType left, UserDirectoryType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("UserDirectoryTypeInternalCode")]
		private string _userDirectoryTypeInternalCode;
		public string UserDirectoryTypeInternalCode
		{
			get { return _userDirectoryTypeInternalCode; }
			set { _userDirectoryTypeInternalCode = value; InternalCode = value.FromInternalCode<UserDirectoryTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region UserScanMode Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class UserScanMode: ReferenceEntity<UserScanModeInternalCode>
	{
		#region Constructors

		public UserScanMode()
        {
            
        }

        public UserScanMode(string code)
            : base(code)
        {
			_userScanModeInternalCode = code;
        }
		
		public UserScanMode(string code, string description)
            : base(code, description)
        {
			_userScanModeInternalCode = code;
        }
        
        public UserScanMode(UserScanModeInternalCode code)
            : base(code)
        {
			_userScanModeInternalCode = code.ToInternalCode();
        }

        public UserScanMode(UserScanModeInternalCode code, string description)
            : base(code, description)
        {
			_userScanModeInternalCode = code.ToInternalCode();
        }

        public static implicit operator UserScanMode(UserScanModeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static UserScanMode FromKey(UserScanModeInternalCode internalCode)
        {
            return new UserScanMode(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(UserScanMode other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as UserScanMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(UserScanMode left, UserScanMode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserScanMode left, UserScanMode right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("UserScanModeInternalCode")]
		private string _userScanModeInternalCode;
		public string UserScanModeInternalCode
		{
			get { return _userScanModeInternalCode; }
			set { _userScanModeInternalCode = value; InternalCode = value.FromInternalCode<UserScanModeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region DirectDistributorPickOption Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class DirectDistributorPickOption: ReferenceEntity<DirectDistributorPickOptionInternalCode>
	{
		#region Constructors

		public DirectDistributorPickOption()
        {
            
        }

        public DirectDistributorPickOption(string code)
            : base(code)
        {
			_directDistributorPickOptionInternalCode = code;
        }
		
		public DirectDistributorPickOption(string code, string description)
            : base(code, description)
        {
			_directDistributorPickOptionInternalCode = code;
        }
        
        public DirectDistributorPickOption(DirectDistributorPickOptionInternalCode code)
            : base(code)
        {
			_directDistributorPickOptionInternalCode = code.ToInternalCode();
        }

        public DirectDistributorPickOption(DirectDistributorPickOptionInternalCode code, string description)
            : base(code, description)
        {
			_directDistributorPickOptionInternalCode = code.ToInternalCode();
        }

        public static implicit operator DirectDistributorPickOption(DirectDistributorPickOptionInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static DirectDistributorPickOption FromKey(DirectDistributorPickOptionInternalCode internalCode)
        {
            return new DirectDistributorPickOption(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(DirectDistributorPickOption other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as DirectDistributorPickOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(DirectDistributorPickOption left, DirectDistributorPickOption right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DirectDistributorPickOption left, DirectDistributorPickOption right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("DirectDistributorPickOptionInternalCode")]
		private string _directDistributorPickOptionInternalCode;
		public string DirectDistributorPickOptionInternalCode
		{
			get { return _directDistributorPickOptionInternalCode; }
			set { _directDistributorPickOptionInternalCode = value; InternalCode = value.FromInternalCode<DirectDistributorPickOptionInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ItemDeliveryPurpose Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ItemDeliveryPurpose: ReferenceEntity<ItemDeliveryPurposeInternalCode>
	{
		#region Constructors

		public ItemDeliveryPurpose()
        {
            
        }

        public ItemDeliveryPurpose(string code)
            : base(code)
        {
			_itemDeliveryPurposeInternalCode = code;
        }
		
		public ItemDeliveryPurpose(string code, string description)
            : base(code, description)
        {
			_itemDeliveryPurposeInternalCode = code;
        }
        
        public ItemDeliveryPurpose(ItemDeliveryPurposeInternalCode code)
            : base(code)
        {
			_itemDeliveryPurposeInternalCode = code.ToInternalCode();
        }

        public ItemDeliveryPurpose(ItemDeliveryPurposeInternalCode code, string description)
            : base(code, description)
        {
			_itemDeliveryPurposeInternalCode = code.ToInternalCode();
        }

        public static implicit operator ItemDeliveryPurpose(ItemDeliveryPurposeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ItemDeliveryPurpose FromKey(ItemDeliveryPurposeInternalCode internalCode)
        {
            return new ItemDeliveryPurpose(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ItemDeliveryPurpose other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ItemDeliveryPurpose);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ItemDeliveryPurpose left, ItemDeliveryPurpose right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ItemDeliveryPurpose left, ItemDeliveryPurpose right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ItemDeliveryPurposeInternalCode")]
		private string _itemDeliveryPurposeInternalCode;
		public string ItemDeliveryPurposeInternalCode
		{
			get { return _itemDeliveryPurposeInternalCode; }
			set { _itemDeliveryPurposeInternalCode = value; InternalCode = value.FromInternalCode<ItemDeliveryPurposeInternalCode>(); }
		}

		[DataMember]
		[Column("ItemDeliveryTransactionFlag")]
		public bool ItemDeliveryTransaction { get; set; }

		#endregion
	}

	#endregion

	#region ItemDeliverySourceType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ItemDeliverySourceType: ReferenceEntity<ItemDeliverySourceTypeInternalCode>
	{
		#region Constructors

		public ItemDeliverySourceType()
        {
            
        }

        public ItemDeliverySourceType(string code)
            : base(code)
        {
			_itemDeliverySourceTypeInternalCode = code;
        }
		
		public ItemDeliverySourceType(string code, string description)
            : base(code, description)
        {
			_itemDeliverySourceTypeInternalCode = code;
        }
        
        public ItemDeliverySourceType(ItemDeliverySourceTypeInternalCode code)
            : base(code)
        {
			_itemDeliverySourceTypeInternalCode = code.ToInternalCode();
        }

        public ItemDeliverySourceType(ItemDeliverySourceTypeInternalCode code, string description)
            : base(code, description)
        {
			_itemDeliverySourceTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator ItemDeliverySourceType(ItemDeliverySourceTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ItemDeliverySourceType FromKey(ItemDeliverySourceTypeInternalCode internalCode)
        {
            return new ItemDeliverySourceType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ItemDeliverySourceType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ItemDeliverySourceType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ItemDeliverySourceType left, ItemDeliverySourceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ItemDeliverySourceType left, ItemDeliverySourceType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ItemDeliverySourceTypeInternalCode")]
		private string _itemDeliverySourceTypeInternalCode;
		public string ItemDeliverySourceTypeInternalCode
		{
			get { return _itemDeliverySourceTypeInternalCode; }
			set { _itemDeliverySourceTypeInternalCode = value; InternalCode = value.FromInternalCode<ItemDeliverySourceTypeInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region ItemDeliveryStateChangeReasonType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ItemDeliveryStateChangeReasonType: ReferenceEntity<ItemDeliveryStateChangeReasonTypeInternalCode>
	{
		#region Constructors

		public ItemDeliveryStateChangeReasonType()
        {
            
        }

        public ItemDeliveryStateChangeReasonType(string code)
            : base(code)
        {
			_itemDeliveryStateChangeReasonTypeInternalCode = code;
        }
		
		public ItemDeliveryStateChangeReasonType(string code, string description)
            : base(code, description)
        {
			_itemDeliveryStateChangeReasonTypeInternalCode = code;
        }
        
        public ItemDeliveryStateChangeReasonType(ItemDeliveryStateChangeReasonTypeInternalCode code)
            : base(code)
        {
			_itemDeliveryStateChangeReasonTypeInternalCode = code.ToInternalCode();
        }

        public ItemDeliveryStateChangeReasonType(ItemDeliveryStateChangeReasonTypeInternalCode code, string description)
            : base(code, description)
        {
			_itemDeliveryStateChangeReasonTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator ItemDeliveryStateChangeReasonType(ItemDeliveryStateChangeReasonTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ItemDeliveryStateChangeReasonType FromKey(ItemDeliveryStateChangeReasonTypeInternalCode internalCode)
        {
            return new ItemDeliveryStateChangeReasonType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ItemDeliveryStateChangeReasonType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ItemDeliveryStateChangeReasonType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ItemDeliveryStateChangeReasonType left, ItemDeliveryStateChangeReasonType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ItemDeliveryStateChangeReasonType left, ItemDeliveryStateChangeReasonType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ItemDeliveryStateChangeReasonTypeInternalCode")]
		private string _itemDeliveryStateChangeReasonTypeInternalCode;
		public string ItemDeliveryStateChangeReasonTypeInternalCode
		{
			get { return _itemDeliveryStateChangeReasonTypeInternalCode; }
			set { _itemDeliveryStateChangeReasonTypeInternalCode = value; InternalCode = value.FromInternalCode<ItemDeliveryStateChangeReasonTypeInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region ItemDeliveryTrackingStatus Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ItemDeliveryTrackingStatus: ReferenceEntity<ItemDeliveryTrackingStatusInternalCode>
	{
		#region Constructors

		public ItemDeliveryTrackingStatus()
        {
            
        }

        public ItemDeliveryTrackingStatus(string code)
            : base(code)
        {
			_itemDeliveryTrackingStatusInternalCode = code;
        }
		
		public ItemDeliveryTrackingStatus(string code, string description)
            : base(code, description)
        {
			_itemDeliveryTrackingStatusInternalCode = code;
        }
        
        public ItemDeliveryTrackingStatus(ItemDeliveryTrackingStatusInternalCode code)
            : base(code)
        {
			_itemDeliveryTrackingStatusInternalCode = code.ToInternalCode();
        }

        public ItemDeliveryTrackingStatus(ItemDeliveryTrackingStatusInternalCode code, string description)
            : base(code, description)
        {
			_itemDeliveryTrackingStatusInternalCode = code.ToInternalCode();
        }

        public static implicit operator ItemDeliveryTrackingStatus(ItemDeliveryTrackingStatusInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ItemDeliveryTrackingStatus FromKey(ItemDeliveryTrackingStatusInternalCode internalCode)
        {
            return new ItemDeliveryTrackingStatus(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ItemDeliveryTrackingStatus other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ItemDeliveryTrackingStatus);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ItemDeliveryTrackingStatus left, ItemDeliveryTrackingStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ItemDeliveryTrackingStatus left, ItemDeliveryTrackingStatus right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ItemDeliveryTrackingStatusInternalCode")]
		private string _itemDeliveryTrackingStatusInternalCode;
		public string ItemDeliveryTrackingStatusInternalCode
		{
			get { return _itemDeliveryTrackingStatusInternalCode; }
			set { _itemDeliveryTrackingStatusInternalCode = value; InternalCode = value.FromInternalCode<ItemDeliveryTrackingStatusInternalCode>(); }
		}

		[DataMember]
		[Column("ItemDeliveryTrackingStatusTypeInternalCode")]
		public string ItemDeliveryTrackingStatusTypeInternalCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		[DataMember]
		[Column("SystemCancelledAppliesFlag")]
		public bool SystemCancelledApplies { get; set; }

		#endregion
	}

	#endregion

	#region ItemDeliveryTrackingStatusType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ItemDeliveryTrackingStatusType: ReferenceEntity<ItemDeliveryTrackingStatusTypeInternalCode>
	{
		#region Constructors

		public ItemDeliveryTrackingStatusType()
        {
            
        }

        public ItemDeliveryTrackingStatusType(string code)
            : base(code)
        {
			_itemDeliveryTrackingStatusTypeInternalCode = code;
        }
		
		public ItemDeliveryTrackingStatusType(string code, string description)
            : base(code, description)
        {
			_itemDeliveryTrackingStatusTypeInternalCode = code;
        }
        
        public ItemDeliveryTrackingStatusType(ItemDeliveryTrackingStatusTypeInternalCode code)
            : base(code)
        {
			_itemDeliveryTrackingStatusTypeInternalCode = code.ToInternalCode();
        }

        public ItemDeliveryTrackingStatusType(ItemDeliveryTrackingStatusTypeInternalCode code, string description)
            : base(code, description)
        {
			_itemDeliveryTrackingStatusTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator ItemDeliveryTrackingStatusType(ItemDeliveryTrackingStatusTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ItemDeliveryTrackingStatusType FromKey(ItemDeliveryTrackingStatusTypeInternalCode internalCode)
        {
            return new ItemDeliveryTrackingStatusType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ItemDeliveryTrackingStatusType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ItemDeliveryTrackingStatusType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ItemDeliveryTrackingStatusType left, ItemDeliveryTrackingStatusType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ItemDeliveryTrackingStatusType left, ItemDeliveryTrackingStatusType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ItemDeliveryTrackingStatusTypeInternalCode")]
		private string _itemDeliveryTrackingStatusTypeInternalCode;
		public string ItemDeliveryTrackingStatusTypeInternalCode
		{
			get { return _itemDeliveryTrackingStatusTypeInternalCode; }
			set { _itemDeliveryTrackingStatusTypeInternalCode = value; InternalCode = value.FromInternalCode<ItemDeliveryTrackingStatusTypeInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region PickGroupType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class PickGroupType: ReferenceEntity<PickGroupTypeInternalCode>
	{
		#region Constructors

		public PickGroupType()
        {
            
        }

        public PickGroupType(string code)
            : base(code)
        {
			_pickGroupTypeInternalCode = code;
        }
		
		public PickGroupType(string code, string description)
            : base(code, description)
        {
			_pickGroupTypeInternalCode = code;
        }
        
        public PickGroupType(PickGroupTypeInternalCode code)
            : base(code)
        {
			_pickGroupTypeInternalCode = code.ToInternalCode();
        }

        public PickGroupType(PickGroupTypeInternalCode code, string description)
            : base(code, description)
        {
			_pickGroupTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator PickGroupType(PickGroupTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static PickGroupType FromKey(PickGroupTypeInternalCode internalCode)
        {
            return new PickGroupType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(PickGroupType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as PickGroupType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(PickGroupType left, PickGroupType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PickGroupType left, PickGroupType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("PickGroupTypeInternalCode")]
		private string _pickGroupTypeInternalCode;
		public string PickGroupTypeInternalCode
		{
			get { return _pickGroupTypeInternalCode; }
			set { _pickGroupTypeInternalCode = value; InternalCode = value.FromInternalCode<PickGroupTypeInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region PickType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class PickType: ReferenceEntity<PickTypeInternalCode>
	{
		#region Constructors

		public PickType()
        {
            
        }

        public PickType(string code)
            : base(code)
        {
			_pickTypeInternalCode = code;
        }
		
		public PickType(string code, string description)
            : base(code, description)
        {
			_pickTypeInternalCode = code;
        }
        
        public PickType(PickTypeInternalCode code)
            : base(code)
        {
			_pickTypeInternalCode = code.ToInternalCode();
        }

        public PickType(PickTypeInternalCode code, string description)
            : base(code, description)
        {
			_pickTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator PickType(PickTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static PickType FromKey(PickTypeInternalCode internalCode)
        {
            return new PickType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(PickType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as PickType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(PickType left, PickType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PickType left, PickType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("PickTypeInternalCode")]
		private string _pickTypeInternalCode;
		public string PickTypeInternalCode
		{
			get { return _pickTypeInternalCode; }
			set { _pickTypeInternalCode = value; InternalCode = value.FromInternalCode<PickTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region PrepDeviceCameraOrientation Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class PrepDeviceCameraOrientation: ReferenceEntity<PrepDeviceCameraOrientationInternalCode>
	{
		#region Constructors

		public PrepDeviceCameraOrientation()
        {
            
        }

        public PrepDeviceCameraOrientation(string code)
            : base(code)
        {
			_prepDeviceCameraOrientationInternalCode = code;
        }
		
		public PrepDeviceCameraOrientation(string code, string description)
            : base(code, description)
        {
			_prepDeviceCameraOrientationInternalCode = code;
        }
        
        public PrepDeviceCameraOrientation(PrepDeviceCameraOrientationInternalCode code)
            : base(code)
        {
			_prepDeviceCameraOrientationInternalCode = code.ToInternalCode();
        }

        public PrepDeviceCameraOrientation(PrepDeviceCameraOrientationInternalCode code, string description)
            : base(code, description)
        {
			_prepDeviceCameraOrientationInternalCode = code.ToInternalCode();
        }

        public static implicit operator PrepDeviceCameraOrientation(PrepDeviceCameraOrientationInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static PrepDeviceCameraOrientation FromKey(PrepDeviceCameraOrientationInternalCode internalCode)
        {
            return new PrepDeviceCameraOrientation(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(PrepDeviceCameraOrientation other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as PrepDeviceCameraOrientation);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(PrepDeviceCameraOrientation left, PrepDeviceCameraOrientation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PrepDeviceCameraOrientation left, PrepDeviceCameraOrientation right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("PrepDeviceCameraOrientationInternalCode")]
		private string _prepDeviceCameraOrientationInternalCode;
		public string PrepDeviceCameraOrientationInternalCode
		{
			get { return _prepDeviceCameraOrientationInternalCode; }
			set { _prepDeviceCameraOrientationInternalCode = value; InternalCode = value.FromInternalCode<PrepDeviceCameraOrientationInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ArchivedDataType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ArchivedDataType: ReferenceEntity<ArchivedDataTypeInternalCode>
	{
		#region Constructors

		public ArchivedDataType()
        {
            
        }

        public ArchivedDataType(string code)
            : base(code)
        {
			_archivedDataTypeInternalCode = code;
        }
		
		public ArchivedDataType(string code, string description)
            : base(code, description)
        {
			_archivedDataTypeInternalCode = code;
        }
        
        public ArchivedDataType(ArchivedDataTypeInternalCode code)
            : base(code)
        {
			_archivedDataTypeInternalCode = code.ToInternalCode();
        }

        public ArchivedDataType(ArchivedDataTypeInternalCode code, string description)
            : base(code, description)
        {
			_archivedDataTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator ArchivedDataType(ArchivedDataTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ArchivedDataType FromKey(ArchivedDataTypeInternalCode internalCode)
        {
            return new ArchivedDataType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ArchivedDataType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ArchivedDataType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ArchivedDataType left, ArchivedDataType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ArchivedDataType left, ArchivedDataType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ArchivedDataTypeInternalCode")]
		private string _archivedDataTypeInternalCode;
		public string ArchivedDataTypeInternalCode
		{
			get { return _archivedDataTypeInternalCode; }
			set { _archivedDataTypeInternalCode = value; InternalCode = value.FromInternalCode<ArchivedDataTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		[DataMember]
		[Column("LastTickValue")]
		public byte[] LastTickValue { get; set; }

		#endregion
	}

	#endregion

	#region ArchivedTransactionSessionError Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ArchivedTransactionSessionError: ReferenceEntity<ArchivedTransactionSessionErrorInternalCode>
	{
		#region Constructors

		public ArchivedTransactionSessionError()
        {
            
        }

        public ArchivedTransactionSessionError(string code)
            : base(code)
        {
			_archivedTransactionSessionErrorInternalCode = code;
        }
		
		public ArchivedTransactionSessionError(string code, string description)
            : base(code, description)
        {
			_archivedTransactionSessionErrorInternalCode = code;
        }
        
        public ArchivedTransactionSessionError(ArchivedTransactionSessionErrorInternalCode code)
            : base(code)
        {
			_archivedTransactionSessionErrorInternalCode = code.ToInternalCode();
        }

        public ArchivedTransactionSessionError(ArchivedTransactionSessionErrorInternalCode code, string description)
            : base(code, description)
        {
			_archivedTransactionSessionErrorInternalCode = code.ToInternalCode();
        }

        public static implicit operator ArchivedTransactionSessionError(ArchivedTransactionSessionErrorInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ArchivedTransactionSessionError FromKey(ArchivedTransactionSessionErrorInternalCode internalCode)
        {
            return new ArchivedTransactionSessionError(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ArchivedTransactionSessionError other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ArchivedTransactionSessionError);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ArchivedTransactionSessionError left, ArchivedTransactionSessionError right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ArchivedTransactionSessionError left, ArchivedTransactionSessionError right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ArchivedTransactionSessionErrorInternalCode")]
		private string _archivedTransactionSessionErrorInternalCode;
		public string ArchivedTransactionSessionErrorInternalCode
		{
			get { return _archivedTransactionSessionErrorInternalCode; }
			set { _archivedTransactionSessionErrorInternalCode = value; InternalCode = value.FromInternalCode<ArchivedTransactionSessionErrorInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region FacilityInboundProblemType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class FacilityInboundProblemType: ReferenceEntity<FacilityInboundProblemTypeInternalCode>
	{
		#region Constructors

		public FacilityInboundProblemType()
        {
            
        }

        public FacilityInboundProblemType(string code)
            : base(code)
        {
			_facilityInboundProblemTypeInternalCode = code;
        }
		
		public FacilityInboundProblemType(string code, string description)
            : base(code, description)
        {
			_facilityInboundProblemTypeInternalCode = code;
        }
        
        public FacilityInboundProblemType(FacilityInboundProblemTypeInternalCode code)
            : base(code)
        {
			_facilityInboundProblemTypeInternalCode = code.ToInternalCode();
        }

        public FacilityInboundProblemType(FacilityInboundProblemTypeInternalCode code, string description)
            : base(code, description)
        {
			_facilityInboundProblemTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator FacilityInboundProblemType(FacilityInboundProblemTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static FacilityInboundProblemType FromKey(FacilityInboundProblemTypeInternalCode internalCode)
        {
            return new FacilityInboundProblemType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(FacilityInboundProblemType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as FacilityInboundProblemType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(FacilityInboundProblemType left, FacilityInboundProblemType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FacilityInboundProblemType left, FacilityInboundProblemType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("FacilityInboundProblemTypeInternalCode")]
		private string _facilityInboundProblemTypeInternalCode;
		public string FacilityInboundProblemTypeInternalCode
		{
			get { return _facilityInboundProblemTypeInternalCode; }
			set { _facilityInboundProblemTypeInternalCode = value; InternalCode = value.FromInternalCode<FacilityInboundProblemTypeInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region InboundInterruptType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class InboundInterruptType: ReferenceEntity<InboundInterruptTypeInternalCode>
	{
		#region Constructors

		public InboundInterruptType()
        {
            
        }

        public InboundInterruptType(string code)
            : base(code)
        {
			_inboundInterruptTypeInternalCode = code;
        }
		
		public InboundInterruptType(string code, string description)
            : base(code, description)
        {
			_inboundInterruptTypeInternalCode = code;
        }
        
        public InboundInterruptType(InboundInterruptTypeInternalCode code)
            : base(code)
        {
			_inboundInterruptTypeInternalCode = code.ToInternalCode();
        }

        public InboundInterruptType(InboundInterruptTypeInternalCode code, string description)
            : base(code, description)
        {
			_inboundInterruptTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator InboundInterruptType(InboundInterruptTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static InboundInterruptType FromKey(InboundInterruptTypeInternalCode internalCode)
        {
            return new InboundInterruptType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(InboundInterruptType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as InboundInterruptType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(InboundInterruptType left, InboundInterruptType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InboundInterruptType left, InboundInterruptType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("InboundInterruptTypeInternalCode")]
		private string _inboundInterruptTypeInternalCode;
		public string InboundInterruptTypeInternalCode
		{
			get { return _inboundInterruptTypeInternalCode; }
			set { _inboundInterruptTypeInternalCode = value; InternalCode = value.FromInternalCode<InboundInterruptTypeInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region InterfaceType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class InterfaceType: ReferenceEntity<InterfaceTypeInternalCode>
	{
		#region Constructors

		public InterfaceType()
        {
            
        }

        public InterfaceType(string code)
            : base(code)
        {
			_interfaceTypeInternalCode = code;
        }
		
		public InterfaceType(string code, string description)
            : base(code, description)
        {
			_interfaceTypeInternalCode = code;
        }
        
        public InterfaceType(InterfaceTypeInternalCode code)
            : base(code)
        {
			_interfaceTypeInternalCode = code.ToInternalCode();
        }

        public InterfaceType(InterfaceTypeInternalCode code, string description)
            : base(code, description)
        {
			_interfaceTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator InterfaceType(InterfaceTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static InterfaceType FromKey(InterfaceTypeInternalCode internalCode)
        {
            return new InterfaceType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(InterfaceType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as InterfaceType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(InterfaceType left, InterfaceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InterfaceType left, InterfaceType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("InterfaceTypeInternalCode")]
		private string _interfaceTypeInternalCode;
		public string InterfaceTypeInternalCode
		{
			get { return _interfaceTypeInternalCode; }
			set { _interfaceTypeInternalCode = value; InternalCode = value.FromInternalCode<InterfaceTypeInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region MessageSubscriptionFailure Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class MessageSubscriptionFailure: ReferenceEntity<MessageSubscriptionFailureInternalCode>
	{
		#region Constructors

		public MessageSubscriptionFailure()
        {
            
        }

        public MessageSubscriptionFailure(string code)
            : base(code)
        {
			_messageSubscriptionFailureInternalCode = code;
        }
		
		public MessageSubscriptionFailure(string code, string description)
            : base(code, description)
        {
			_messageSubscriptionFailureInternalCode = code;
        }
        
        public MessageSubscriptionFailure(MessageSubscriptionFailureInternalCode code)
            : base(code)
        {
			_messageSubscriptionFailureInternalCode = code.ToInternalCode();
        }

        public MessageSubscriptionFailure(MessageSubscriptionFailureInternalCode code, string description)
            : base(code, description)
        {
			_messageSubscriptionFailureInternalCode = code.ToInternalCode();
        }

        public static implicit operator MessageSubscriptionFailure(MessageSubscriptionFailureInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static MessageSubscriptionFailure FromKey(MessageSubscriptionFailureInternalCode internalCode)
        {
            return new MessageSubscriptionFailure(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(MessageSubscriptionFailure other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as MessageSubscriptionFailure);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(MessageSubscriptionFailure left, MessageSubscriptionFailure right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MessageSubscriptionFailure left, MessageSubscriptionFailure right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("MessageSubscriptionFailureInternalCode")]
		private string _messageSubscriptionFailureInternalCode;
		public string MessageSubscriptionFailureInternalCode
		{
			get { return _messageSubscriptionFailureInternalCode; }
			set { _messageSubscriptionFailureInternalCode = value; InternalCode = value.FromInternalCode<MessageSubscriptionFailureInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region OutboundEncounterMergeType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class OutboundEncounterMergeType: ReferenceEntity<OutboundEncounterMergeTypeInternalCode>
	{
		#region Constructors

		public OutboundEncounterMergeType()
        {
            
        }

        public OutboundEncounterMergeType(string code)
            : base(code)
        {
			_outboundEncounterMergeTypeInternalCode = code;
        }
		
		public OutboundEncounterMergeType(string code, string description)
            : base(code, description)
        {
			_outboundEncounterMergeTypeInternalCode = code;
        }
        
        public OutboundEncounterMergeType(OutboundEncounterMergeTypeInternalCode code)
            : base(code)
        {
			_outboundEncounterMergeTypeInternalCode = code.ToInternalCode();
        }

        public OutboundEncounterMergeType(OutboundEncounterMergeTypeInternalCode code, string description)
            : base(code, description)
        {
			_outboundEncounterMergeTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator OutboundEncounterMergeType(OutboundEncounterMergeTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static OutboundEncounterMergeType FromKey(OutboundEncounterMergeTypeInternalCode internalCode)
        {
            return new OutboundEncounterMergeType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(OutboundEncounterMergeType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as OutboundEncounterMergeType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(OutboundEncounterMergeType left, OutboundEncounterMergeType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OutboundEncounterMergeType left, OutboundEncounterMergeType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("OutboundEncounterMergeTypeInternalCode")]
		private string _outboundEncounterMergeTypeInternalCode;
		public string OutboundEncounterMergeTypeInternalCode
		{
			get { return _outboundEncounterMergeTypeInternalCode; }
			set { _outboundEncounterMergeTypeInternalCode = value; InternalCode = value.FromInternalCode<OutboundEncounterMergeTypeInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region OutboundMessageType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class OutboundMessageType: ReferenceEntity<OutboundMessageTypeInternalCode>
	{
		#region Constructors

		public OutboundMessageType()
        {
            
        }

        public OutboundMessageType(string code)
            : base(code)
        {
			_outboundMessageTypeInternalCode = code;
        }
		
		public OutboundMessageType(string code, string description)
            : base(code, description)
        {
			_outboundMessageTypeInternalCode = code;
        }
        
        public OutboundMessageType(OutboundMessageTypeInternalCode code)
            : base(code)
        {
			_outboundMessageTypeInternalCode = code.ToInternalCode();
        }

        public OutboundMessageType(OutboundMessageTypeInternalCode code, string description)
            : base(code, description)
        {
			_outboundMessageTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator OutboundMessageType(OutboundMessageTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static OutboundMessageType FromKey(OutboundMessageTypeInternalCode internalCode)
        {
            return new OutboundMessageType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(OutboundMessageType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as OutboundMessageType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(OutboundMessageType left, OutboundMessageType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OutboundMessageType left, OutboundMessageType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("OutboundMessageTypeInternalCode")]
		private string _outboundMessageTypeInternalCode;
		public string OutboundMessageTypeInternalCode
		{
			get { return _outboundMessageTypeInternalCode; }
			set { _outboundMessageTypeInternalCode = value; InternalCode = value.FromInternalCode<OutboundMessageTypeInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region ReceivedMessageQueueStatus Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ReceivedMessageQueueStatus: ReferenceEntity<ReceivedMessageQueueStatusInternalCode>
	{
		#region Constructors

		public ReceivedMessageQueueStatus()
        {
            
        }

        public ReceivedMessageQueueStatus(string code)
            : base(code)
        {
			_receivedMessageQueueStatusInternalCode = code;
        }
		
		public ReceivedMessageQueueStatus(string code, string description)
            : base(code, description)
        {
			_receivedMessageQueueStatusInternalCode = code;
        }
        
        public ReceivedMessageQueueStatus(ReceivedMessageQueueStatusInternalCode code)
            : base(code)
        {
			_receivedMessageQueueStatusInternalCode = code.ToInternalCode();
        }

        public ReceivedMessageQueueStatus(ReceivedMessageQueueStatusInternalCode code, string description)
            : base(code, description)
        {
			_receivedMessageQueueStatusInternalCode = code.ToInternalCode();
        }

        public static implicit operator ReceivedMessageQueueStatus(ReceivedMessageQueueStatusInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ReceivedMessageQueueStatus FromKey(ReceivedMessageQueueStatusInternalCode internalCode)
        {
            return new ReceivedMessageQueueStatus(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ReceivedMessageQueueStatus other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ReceivedMessageQueueStatus);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ReceivedMessageQueueStatus left, ReceivedMessageQueueStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReceivedMessageQueueStatus left, ReceivedMessageQueueStatus right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ReceivedMessageQueueStatusInternalCode")]
		private string _receivedMessageQueueStatusInternalCode;
		public string ReceivedMessageQueueStatusInternalCode
		{
			get { return _receivedMessageQueueStatusInternalCode; }
			set { _receivedMessageQueueStatusInternalCode = value; InternalCode = value.FromInternalCode<ReceivedMessageQueueStatusInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region ReceivedMessageType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ReceivedMessageType: ReferenceEntity<ReceivedMessageTypeInternalCode>
	{
		#region Constructors

		public ReceivedMessageType()
        {
            
        }

        public ReceivedMessageType(string code)
            : base(code)
        {
			_receivedMessageTypeInternalCode = code;
        }
		
		public ReceivedMessageType(string code, string description)
            : base(code, description)
        {
			_receivedMessageTypeInternalCode = code;
        }
        
        public ReceivedMessageType(ReceivedMessageTypeInternalCode code)
            : base(code)
        {
			_receivedMessageTypeInternalCode = code.ToInternalCode();
        }

        public ReceivedMessageType(ReceivedMessageTypeInternalCode code, string description)
            : base(code, description)
        {
			_receivedMessageTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator ReceivedMessageType(ReceivedMessageTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ReceivedMessageType FromKey(ReceivedMessageTypeInternalCode internalCode)
        {
            return new ReceivedMessageType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ReceivedMessageType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ReceivedMessageType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ReceivedMessageType left, ReceivedMessageType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReceivedMessageType left, ReceivedMessageType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ReceivedMessageTypeInternalCode")]
		private string _receivedMessageTypeInternalCode;
		public string ReceivedMessageTypeInternalCode
		{
			get { return _receivedMessageTypeInternalCode; }
			set { _receivedMessageTypeInternalCode = value; InternalCode = value.FromInternalCode<ReceivedMessageTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region SendInventoryEventType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SendInventoryEventType: ReferenceEntity<SendInventoryEventTypeInternalCode>
	{
		#region Constructors

		public SendInventoryEventType()
        {
            
        }

        public SendInventoryEventType(string code)
            : base(code)
        {
			_sendInventoryEventTypeInternalCode = code;
        }
		
		public SendInventoryEventType(string code, string description)
            : base(code, description)
        {
			_sendInventoryEventTypeInternalCode = code;
        }
        
        public SendInventoryEventType(SendInventoryEventTypeInternalCode code)
            : base(code)
        {
			_sendInventoryEventTypeInternalCode = code.ToInternalCode();
        }

        public SendInventoryEventType(SendInventoryEventTypeInternalCode code, string description)
            : base(code, description)
        {
			_sendInventoryEventTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator SendInventoryEventType(SendInventoryEventTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SendInventoryEventType FromKey(SendInventoryEventTypeInternalCode internalCode)
        {
            return new SendInventoryEventType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SendInventoryEventType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SendInventoryEventType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SendInventoryEventType left, SendInventoryEventType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SendInventoryEventType left, SendInventoryEventType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SendInventoryEventTypeInternalCode")]
		private string _sendInventoryEventTypeInternalCode;
		public string SendInventoryEventTypeInternalCode
		{
			get { return _sendInventoryEventTypeInternalCode; }
			set { _sendInventoryEventTypeInternalCode = value; InternalCode = value.FromInternalCode<SendInventoryEventTypeInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region SendInventoryFailure Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SendInventoryFailure: ReferenceEntity<SendInventoryFailureInternalCode>
	{
		#region Constructors

		public SendInventoryFailure()
        {
            
        }

        public SendInventoryFailure(string code)
            : base(code)
        {
			_sendInventoryFailureInternalCode = code;
        }
		
		public SendInventoryFailure(string code, string description)
            : base(code, description)
        {
			_sendInventoryFailureInternalCode = code;
        }
        
        public SendInventoryFailure(SendInventoryFailureInternalCode code)
            : base(code)
        {
			_sendInventoryFailureInternalCode = code.ToInternalCode();
        }

        public SendInventoryFailure(SendInventoryFailureInternalCode code, string description)
            : base(code, description)
        {
			_sendInventoryFailureInternalCode = code.ToInternalCode();
        }

        public static implicit operator SendInventoryFailure(SendInventoryFailureInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SendInventoryFailure FromKey(SendInventoryFailureInternalCode internalCode)
        {
            return new SendInventoryFailure(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SendInventoryFailure other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SendInventoryFailure);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SendInventoryFailure left, SendInventoryFailure right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SendInventoryFailure left, SendInventoryFailure right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SendInventoryFailureInternalCode")]
		private string _sendInventoryFailureInternalCode;
		public string SendInventoryFailureInternalCode
		{
			get { return _sendInventoryFailureInternalCode; }
			set { _sendInventoryFailureInternalCode = value; InternalCode = value.FromInternalCode<SendInventoryFailureInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region SubscriptionTopic Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SubscriptionTopic: ReferenceEntity<SubscriptionTopicInternalCode>
	{
		#region Constructors

		public SubscriptionTopic()
        {
            
        }

        public SubscriptionTopic(string code)
            : base(code)
        {
			_subscriptionTopicInternalCode = code;
        }
		
		public SubscriptionTopic(string code, string description)
            : base(code, description)
        {
			_subscriptionTopicInternalCode = code;
        }
        
        public SubscriptionTopic(SubscriptionTopicInternalCode code)
            : base(code)
        {
			_subscriptionTopicInternalCode = code.ToInternalCode();
        }

        public SubscriptionTopic(SubscriptionTopicInternalCode code, string description)
            : base(code, description)
        {
			_subscriptionTopicInternalCode = code.ToInternalCode();
        }

        public static implicit operator SubscriptionTopic(SubscriptionTopicInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SubscriptionTopic FromKey(SubscriptionTopicInternalCode internalCode)
        {
            return new SubscriptionTopic(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SubscriptionTopic other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SubscriptionTopic);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SubscriptionTopic left, SubscriptionTopic right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionTopic left, SubscriptionTopic right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SubscriptionTopicInternalCode")]
		private string _subscriptionTopicInternalCode;
		public string SubscriptionTopicInternalCode
		{
			get { return _subscriptionTopicInternalCode; }
			set { _subscriptionTopicInternalCode = value; InternalCode = value.FromInternalCode<SubscriptionTopicInternalCode>(); }
		}

		[DataMember]
		[Column("SubscriptionTopicTypeInternalCode")]
		public string SubscriptionTopicTypeInternalCode { get; set; }

		[DataMember]
		[Column("TopicID")]
		public string TopicID { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region SubscriptionTopicType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SubscriptionTopicType: ReferenceEntity<SubscriptionTopicTypeInternalCode>
	{
		#region Constructors

		public SubscriptionTopicType()
        {
            
        }

        public SubscriptionTopicType(string code)
            : base(code)
        {
			_subscriptionTopicTypeInternalCode = code;
        }
		
		public SubscriptionTopicType(string code, string description)
            : base(code, description)
        {
			_subscriptionTopicTypeInternalCode = code;
        }
        
        public SubscriptionTopicType(SubscriptionTopicTypeInternalCode code)
            : base(code)
        {
			_subscriptionTopicTypeInternalCode = code.ToInternalCode();
        }

        public SubscriptionTopicType(SubscriptionTopicTypeInternalCode code, string description)
            : base(code, description)
        {
			_subscriptionTopicTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator SubscriptionTopicType(SubscriptionTopicTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SubscriptionTopicType FromKey(SubscriptionTopicTypeInternalCode internalCode)
        {
            return new SubscriptionTopicType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SubscriptionTopicType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SubscriptionTopicType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SubscriptionTopicType left, SubscriptionTopicType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionTopicType left, SubscriptionTopicType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SubscriptionTopicTypeInternalCode")]
		private string _subscriptionTopicTypeInternalCode;
		public string SubscriptionTopicTypeInternalCode
		{
			get { return _subscriptionTopicTypeInternalCode; }
			set { _subscriptionTopicTypeInternalCode = value; InternalCode = value.FromInternalCode<SubscriptionTopicTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region UpstreamMessageActionType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class UpstreamMessageActionType: ReferenceEntity<UpstreamMessageActionTypeInternalCode>
	{
		#region Constructors

		public UpstreamMessageActionType()
        {
            
        }

        public UpstreamMessageActionType(string code)
            : base(code)
        {
			_upstreamMessageActionTypeInternalCode = code;
        }
		
		public UpstreamMessageActionType(string code, string description)
            : base(code, description)
        {
			_upstreamMessageActionTypeInternalCode = code;
        }
        
        public UpstreamMessageActionType(UpstreamMessageActionTypeInternalCode code)
            : base(code)
        {
			_upstreamMessageActionTypeInternalCode = code.ToInternalCode();
        }

        public UpstreamMessageActionType(UpstreamMessageActionTypeInternalCode code, string description)
            : base(code, description)
        {
			_upstreamMessageActionTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator UpstreamMessageActionType(UpstreamMessageActionTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static UpstreamMessageActionType FromKey(UpstreamMessageActionTypeInternalCode internalCode)
        {
            return new UpstreamMessageActionType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(UpstreamMessageActionType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as UpstreamMessageActionType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(UpstreamMessageActionType left, UpstreamMessageActionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpstreamMessageActionType left, UpstreamMessageActionType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("UpstreamMessageActionTypeInternalCode")]
		private string _upstreamMessageActionTypeInternalCode;
		public string UpstreamMessageActionTypeInternalCode
		{
			get { return _upstreamMessageActionTypeInternalCode; }
			set { _upstreamMessageActionTypeInternalCode = value; InternalCode = value.FromInternalCode<UpstreamMessageActionTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region UpstreamMessageType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class UpstreamMessageType: ReferenceEntity<UpstreamMessageTypeInternalCode>
	{
		#region Constructors

		public UpstreamMessageType()
        {
            
        }

        public UpstreamMessageType(string code)
            : base(code)
        {
			_upstreamMessageTypeInternalCode = code;
        }
		
		public UpstreamMessageType(string code, string description)
            : base(code, description)
        {
			_upstreamMessageTypeInternalCode = code;
        }
        
        public UpstreamMessageType(UpstreamMessageTypeInternalCode code)
            : base(code)
        {
			_upstreamMessageTypeInternalCode = code.ToInternalCode();
        }

        public UpstreamMessageType(UpstreamMessageTypeInternalCode code, string description)
            : base(code, description)
        {
			_upstreamMessageTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator UpstreamMessageType(UpstreamMessageTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static UpstreamMessageType FromKey(UpstreamMessageTypeInternalCode internalCode)
        {
            return new UpstreamMessageType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(UpstreamMessageType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as UpstreamMessageType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(UpstreamMessageType left, UpstreamMessageType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpstreamMessageType left, UpstreamMessageType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("UpstreamMessageTypeInternalCode")]
		private string _upstreamMessageTypeInternalCode;
		public string UpstreamMessageTypeInternalCode
		{
			get { return _upstreamMessageTypeInternalCode; }
			set { _upstreamMessageTypeInternalCode = value; InternalCode = value.FromInternalCode<UpstreamMessageTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region PharmacyOrderComponentType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class PharmacyOrderComponentType: ReferenceEntity<PharmacyOrderComponentTypeInternalCode>
	{
		#region Constructors

		public PharmacyOrderComponentType()
        {
            
        }

        public PharmacyOrderComponentType(string code)
            : base(code)
        {
			_pharmacyOrderComponentTypeInternalCode = code;
        }
		
		public PharmacyOrderComponentType(string code, string description)
            : base(code, description)
        {
			_pharmacyOrderComponentTypeInternalCode = code;
        }
        
        public PharmacyOrderComponentType(PharmacyOrderComponentTypeInternalCode code)
            : base(code)
        {
			_pharmacyOrderComponentTypeInternalCode = code.ToInternalCode();
        }

        public PharmacyOrderComponentType(PharmacyOrderComponentTypeInternalCode code, string description)
            : base(code, description)
        {
			_pharmacyOrderComponentTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator PharmacyOrderComponentType(PharmacyOrderComponentTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static PharmacyOrderComponentType FromKey(PharmacyOrderComponentTypeInternalCode internalCode)
        {
            return new PharmacyOrderComponentType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(PharmacyOrderComponentType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as PharmacyOrderComponentType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(PharmacyOrderComponentType left, PharmacyOrderComponentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PharmacyOrderComponentType left, PharmacyOrderComponentType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("PharmacyOrderComponentTypeInternalCode")]
		private string _pharmacyOrderComponentTypeInternalCode;
		public string PharmacyOrderComponentTypeInternalCode
		{
			get { return _pharmacyOrderComponentTypeInternalCode; }
			set { _pharmacyOrderComponentTypeInternalCode = value; InternalCode = value.FromInternalCode<PharmacyOrderComponentTypeInternalCode>(); }
		}

		[DataMember]
		[Column("DisplayCode")]
		public string DisplayCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region PharmacyOrderSpecialRelationship Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class PharmacyOrderSpecialRelationship: ReferenceEntity<PharmacyOrderSpecialRelationshipInternalCode>
	{
		#region Constructors

		public PharmacyOrderSpecialRelationship()
        {
            
        }

        public PharmacyOrderSpecialRelationship(string code)
            : base(code)
        {
			_pharmacyOrderSpecialRelationshipInternalCode = code;
        }
		
		public PharmacyOrderSpecialRelationship(string code, string description)
            : base(code, description)
        {
			_pharmacyOrderSpecialRelationshipInternalCode = code;
        }
        
        public PharmacyOrderSpecialRelationship(PharmacyOrderSpecialRelationshipInternalCode code)
            : base(code)
        {
			_pharmacyOrderSpecialRelationshipInternalCode = code.ToInternalCode();
        }

        public PharmacyOrderSpecialRelationship(PharmacyOrderSpecialRelationshipInternalCode code, string description)
            : base(code, description)
        {
			_pharmacyOrderSpecialRelationshipInternalCode = code.ToInternalCode();
        }

        public static implicit operator PharmacyOrderSpecialRelationship(PharmacyOrderSpecialRelationshipInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static PharmacyOrderSpecialRelationship FromKey(PharmacyOrderSpecialRelationshipInternalCode internalCode)
        {
            return new PharmacyOrderSpecialRelationship(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(PharmacyOrderSpecialRelationship other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as PharmacyOrderSpecialRelationship);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(PharmacyOrderSpecialRelationship left, PharmacyOrderSpecialRelationship right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PharmacyOrderSpecialRelationship left, PharmacyOrderSpecialRelationship right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("PharmacyOrderSpecialRelationshipInternalCode")]
		private string _pharmacyOrderSpecialRelationshipInternalCode;
		public string PharmacyOrderSpecialRelationshipInternalCode
		{
			get { return _pharmacyOrderSpecialRelationshipInternalCode; }
			set { _pharmacyOrderSpecialRelationshipInternalCode = value; InternalCode = value.FromInternalCode<PharmacyOrderSpecialRelationshipInternalCode>(); }
		}

		[DataMember]
		[Column("DisplayCode")]
		public string DisplayCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region PharmacyOrderType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class PharmacyOrderType: ReferenceEntity<PharmacyOrderTypeInternalCode>
	{
		#region Constructors

		public PharmacyOrderType()
        {
            
        }

        public PharmacyOrderType(string code)
            : base(code)
        {
			_pharmacyOrderTypeInternalCode = code;
        }
		
		public PharmacyOrderType(string code, string description)
            : base(code, description)
        {
			_pharmacyOrderTypeInternalCode = code;
        }
        
        public PharmacyOrderType(PharmacyOrderTypeInternalCode code)
            : base(code)
        {
			_pharmacyOrderTypeInternalCode = code.ToInternalCode();
        }

        public PharmacyOrderType(PharmacyOrderTypeInternalCode code, string description)
            : base(code, description)
        {
			_pharmacyOrderTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator PharmacyOrderType(PharmacyOrderTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static PharmacyOrderType FromKey(PharmacyOrderTypeInternalCode internalCode)
        {
            return new PharmacyOrderType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(PharmacyOrderType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as PharmacyOrderType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(PharmacyOrderType left, PharmacyOrderType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PharmacyOrderType left, PharmacyOrderType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("PharmacyOrderTypeInternalCode")]
		private string _pharmacyOrderTypeInternalCode;
		public string PharmacyOrderTypeInternalCode
		{
			get { return _pharmacyOrderTypeInternalCode; }
			set { _pharmacyOrderTypeInternalCode = value; InternalCode = value.FromInternalCode<PharmacyOrderTypeInternalCode>(); }
		}

		[DataMember]
		[Column("DisplayCode")]
		public string DisplayCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region StandardRepeatPattern Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class StandardRepeatPattern: ReferenceEntity<StandardRepeatPatternInternalCode>
	{
		#region Constructors

		public StandardRepeatPattern()
        {
            
        }

        public StandardRepeatPattern(string code)
            : base(code)
        {
			_standardRepeatPatternInternalCode = code;
        }
		
		public StandardRepeatPattern(string code, string description)
            : base(code, description)
        {
			_standardRepeatPatternInternalCode = code;
        }
        
        public StandardRepeatPattern(StandardRepeatPatternInternalCode code)
            : base(code)
        {
			_standardRepeatPatternInternalCode = code.ToInternalCode();
        }

        public StandardRepeatPattern(StandardRepeatPatternInternalCode code, string description)
            : base(code, description)
        {
			_standardRepeatPatternInternalCode = code.ToInternalCode();
        }

        public static implicit operator StandardRepeatPattern(StandardRepeatPatternInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static StandardRepeatPattern FromKey(StandardRepeatPatternInternalCode internalCode)
        {
            return new StandardRepeatPattern(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(StandardRepeatPattern other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as StandardRepeatPattern);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(StandardRepeatPattern left, StandardRepeatPattern right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StandardRepeatPattern left, StandardRepeatPattern right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("StandardRepeatPatternInternalCode")]
		private string _standardRepeatPatternInternalCode;
		public string StandardRepeatPatternInternalCode
		{
			get { return _standardRepeatPatternInternalCode; }
			set { _standardRepeatPatternInternalCode = value; InternalCode = value.FromInternalCode<StandardRepeatPatternInternalCode>(); }
		}

		[DataMember]
		[Column("DisplayCode")]
		public string DisplayCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region StandardTimingRecordPriority Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class StandardTimingRecordPriority: ReferenceEntity<StandardTimingRecordPriorityInternalCode>
	{
		#region Constructors

		public StandardTimingRecordPriority()
        {
            
        }

        public StandardTimingRecordPriority(string code)
            : base(code)
        {
			_standardTimingRecordPriorityInternalCode = code;
        }
		
		public StandardTimingRecordPriority(string code, string description)
            : base(code, description)
        {
			_standardTimingRecordPriorityInternalCode = code;
        }
        
        public StandardTimingRecordPriority(StandardTimingRecordPriorityInternalCode code)
            : base(code)
        {
			_standardTimingRecordPriorityInternalCode = code.ToInternalCode();
        }

        public StandardTimingRecordPriority(StandardTimingRecordPriorityInternalCode code, string description)
            : base(code, description)
        {
			_standardTimingRecordPriorityInternalCode = code.ToInternalCode();
        }

        public static implicit operator StandardTimingRecordPriority(StandardTimingRecordPriorityInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static StandardTimingRecordPriority FromKey(StandardTimingRecordPriorityInternalCode internalCode)
        {
            return new StandardTimingRecordPriority(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(StandardTimingRecordPriority other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as StandardTimingRecordPriority);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(StandardTimingRecordPriority left, StandardTimingRecordPriority right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StandardTimingRecordPriority left, StandardTimingRecordPriority right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("StandardTimingRecordPriorityInternalCode")]
		private string _standardTimingRecordPriorityInternalCode;
		public string StandardTimingRecordPriorityInternalCode
		{
			get { return _standardTimingRecordPriorityInternalCode; }
			set { _standardTimingRecordPriorityInternalCode = value; InternalCode = value.FromInternalCode<StandardTimingRecordPriorityInternalCode>(); }
		}

		[DataMember]
		[Column("DisplayCode")]
		public string DisplayCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region TimingRecordConjunction Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class TimingRecordConjunction: ReferenceEntity<TimingRecordConjunctionInternalCode>
	{
		#region Constructors

		public TimingRecordConjunction()
        {
            
        }

        public TimingRecordConjunction(string code)
            : base(code)
        {
			_timingRecordConjunctionInternalCode = code;
        }
		
		public TimingRecordConjunction(string code, string description)
            : base(code, description)
        {
			_timingRecordConjunctionInternalCode = code;
        }
        
        public TimingRecordConjunction(TimingRecordConjunctionInternalCode code)
            : base(code)
        {
			_timingRecordConjunctionInternalCode = code.ToInternalCode();
        }

        public TimingRecordConjunction(TimingRecordConjunctionInternalCode code, string description)
            : base(code, description)
        {
			_timingRecordConjunctionInternalCode = code.ToInternalCode();
        }

        public static implicit operator TimingRecordConjunction(TimingRecordConjunctionInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static TimingRecordConjunction FromKey(TimingRecordConjunctionInternalCode internalCode)
        {
            return new TimingRecordConjunction(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(TimingRecordConjunction other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as TimingRecordConjunction);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(TimingRecordConjunction left, TimingRecordConjunction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TimingRecordConjunction left, TimingRecordConjunction right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("TimingRecordConjunctionInternalCode")]
		private string _timingRecordConjunctionInternalCode;
		public string TimingRecordConjunctionInternalCode
		{
			get { return _timingRecordConjunctionInternalCode; }
			set { _timingRecordConjunctionInternalCode = value; InternalCode = value.FromInternalCode<TimingRecordConjunctionInternalCode>(); }
		}

		[DataMember]
		[Column("DisplayCode")]
		public string DisplayCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region IdentityFlow Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class IdentityFlow: ReferenceEntity<IdentityFlowInternalCode>
	{
		#region Constructors

		public IdentityFlow()
        {
            
        }

        public IdentityFlow(string code)
            : base(code)
        {
			_identityFlowInternalCode = code;
        }
		
		public IdentityFlow(string code, string description)
            : base(code, description)
        {
			_identityFlowInternalCode = code;
        }
        
        public IdentityFlow(IdentityFlowInternalCode code)
            : base(code)
        {
			_identityFlowInternalCode = code.ToInternalCode();
        }

        public IdentityFlow(IdentityFlowInternalCode code, string description)
            : base(code, description)
        {
			_identityFlowInternalCode = code.ToInternalCode();
        }

        public static implicit operator IdentityFlow(IdentityFlowInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static IdentityFlow FromKey(IdentityFlowInternalCode internalCode)
        {
            return new IdentityFlow(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(IdentityFlow other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as IdentityFlow);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(IdentityFlow left, IdentityFlow right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IdentityFlow left, IdentityFlow right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("IdentityFlowInternalCode")]
		private string _identityFlowInternalCode;
		public string IdentityFlowInternalCode
		{
			get { return _identityFlowInternalCode; }
			set { _identityFlowInternalCode = value; InternalCode = value.FromInternalCode<IdentityFlowInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region AutoMedLabelMode Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class AutoMedLabelMode: ReferenceEntity<AutoMedLabelModeInternalCode>
	{
		#region Constructors

		public AutoMedLabelMode()
        {
            
        }

        public AutoMedLabelMode(string code)
            : base(code)
        {
			_autoMedLabelModeInternalCode = code;
        }
		
		public AutoMedLabelMode(string code, string description)
            : base(code, description)
        {
			_autoMedLabelModeInternalCode = code;
        }
        
        public AutoMedLabelMode(AutoMedLabelModeInternalCode code)
            : base(code)
        {
			_autoMedLabelModeInternalCode = code.ToInternalCode();
        }

        public AutoMedLabelMode(AutoMedLabelModeInternalCode code, string description)
            : base(code, description)
        {
			_autoMedLabelModeInternalCode = code.ToInternalCode();
        }

        public static implicit operator AutoMedLabelMode(AutoMedLabelModeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static AutoMedLabelMode FromKey(AutoMedLabelModeInternalCode internalCode)
        {
            return new AutoMedLabelMode(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(AutoMedLabelMode other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as AutoMedLabelMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(AutoMedLabelMode left, AutoMedLabelMode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AutoMedLabelMode left, AutoMedLabelMode right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("AutoMedLabelModeInternalCode")]
		private string _autoMedLabelModeInternalCode;
		public string AutoMedLabelModeInternalCode
		{
			get { return _autoMedLabelModeInternalCode; }
			set { _autoMedLabelModeInternalCode = value; InternalCode = value.FromInternalCode<AutoMedLabelModeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region CountCUBIEEjectMode Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class CountCUBIEEjectMode: ReferenceEntity<CountCUBIEEjectModeInternalCode>
	{
		#region Constructors

		public CountCUBIEEjectMode()
        {
            
        }

        public CountCUBIEEjectMode(string code)
            : base(code)
        {
			_countCUBIEEjectModeInternalCode = code;
        }
		
		public CountCUBIEEjectMode(string code, string description)
            : base(code, description)
        {
			_countCUBIEEjectModeInternalCode = code;
        }
        
        public CountCUBIEEjectMode(CountCUBIEEjectModeInternalCode code)
            : base(code)
        {
			_countCUBIEEjectModeInternalCode = code.ToInternalCode();
        }

        public CountCUBIEEjectMode(CountCUBIEEjectModeInternalCode code, string description)
            : base(code, description)
        {
			_countCUBIEEjectModeInternalCode = code.ToInternalCode();
        }

        public static implicit operator CountCUBIEEjectMode(CountCUBIEEjectModeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static CountCUBIEEjectMode FromKey(CountCUBIEEjectModeInternalCode internalCode)
        {
            return new CountCUBIEEjectMode(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(CountCUBIEEjectMode other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as CountCUBIEEjectMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(CountCUBIEEjectMode left, CountCUBIEEjectMode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CountCUBIEEjectMode left, CountCUBIEEjectMode right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("CountCUBIEEjectModeInternalCode")]
		private string _countCUBIEEjectModeInternalCode;
		public string CountCUBIEEjectModeInternalCode
		{
			get { return _countCUBIEEjectModeInternalCode; }
			set { _countCUBIEEjectModeInternalCode = value; InternalCode = value.FromInternalCode<CountCUBIEEjectModeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region FractionalUOMType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class FractionalUOMType: ReferenceEntity<FractionalUOMTypeInternalCode>
	{
		#region Constructors

		public FractionalUOMType()
        {
            
        }

        public FractionalUOMType(string code)
            : base(code)
        {
			_fractionalUOMTypeInternalCode = code;
        }
		
		public FractionalUOMType(string code, string description)
            : base(code, description)
        {
			_fractionalUOMTypeInternalCode = code;
        }
        
        public FractionalUOMType(FractionalUOMTypeInternalCode code)
            : base(code)
        {
			_fractionalUOMTypeInternalCode = code.ToInternalCode();
        }

        public FractionalUOMType(FractionalUOMTypeInternalCode code, string description)
            : base(code, description)
        {
			_fractionalUOMTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator FractionalUOMType(FractionalUOMTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static FractionalUOMType FromKey(FractionalUOMTypeInternalCode internalCode)
        {
            return new FractionalUOMType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(FractionalUOMType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as FractionalUOMType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(FractionalUOMType left, FractionalUOMType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FractionalUOMType left, FractionalUOMType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("FractionalUOMTypeInternalCode")]
		private string _fractionalUOMTypeInternalCode;
		public string FractionalUOMTypeInternalCode
		{
			get { return _fractionalUOMTypeInternalCode; }
			set { _fractionalUOMTypeInternalCode = value; InternalCode = value.FromInternalCode<FractionalUOMTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ItemSubType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ItemSubType: ReferenceEntity<ItemSubTypeInternalCode>
	{
		#region Constructors

		public ItemSubType()
        {
            
        }

        public ItemSubType(string code)
            : base(code)
        {
			_itemSubTypeInternalCode = code;
        }
		
		public ItemSubType(string code, string description)
            : base(code, description)
        {
			_itemSubTypeInternalCode = code;
        }
        
        public ItemSubType(ItemSubTypeInternalCode code)
            : base(code)
        {
			_itemSubTypeInternalCode = code.ToInternalCode();
        }

        public ItemSubType(ItemSubTypeInternalCode code, string description)
            : base(code, description)
        {
			_itemSubTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator ItemSubType(ItemSubTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ItemSubType FromKey(ItemSubTypeInternalCode internalCode)
        {
            return new ItemSubType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ItemSubType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ItemSubType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ItemSubType left, ItemSubType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ItemSubType left, ItemSubType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ItemSubTypeInternalCode")]
		private string _itemSubTypeInternalCode;
		public string ItemSubTypeInternalCode
		{
			get { return _itemSubTypeInternalCode; }
			set { _itemSubTypeInternalCode = value; InternalCode = value.FromInternalCode<ItemSubTypeInternalCode>(); }
		}

		[DataMember]
		[Column("ItemTypeInternalCode")]
		public string ItemTypeInternalCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ItemType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ItemType: ReferenceEntity<ItemTypeInternalCode>
	{
		#region Constructors

		public ItemType()
        {
            
        }

        public ItemType(string code)
            : base(code)
        {
			_itemTypeInternalCode = code;
        }
		
		public ItemType(string code, string description)
            : base(code, description)
        {
			_itemTypeInternalCode = code;
        }
        
        public ItemType(ItemTypeInternalCode code)
            : base(code)
        {
			_itemTypeInternalCode = code.ToInternalCode();
        }

        public ItemType(ItemTypeInternalCode code, string description)
            : base(code, description)
        {
			_itemTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator ItemType(ItemTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ItemType FromKey(ItemTypeInternalCode internalCode)
        {
            return new ItemType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ItemType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ItemType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ItemType left, ItemType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ItemType left, ItemType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ItemTypeInternalCode")]
		private string _itemTypeInternalCode;
		public string ItemTypeInternalCode
		{
			get { return _itemTypeInternalCode; }
			set { _itemTypeInternalCode = value; InternalCode = value.FromInternalCode<ItemTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region MedFailoverReturnMode Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class MedFailoverReturnMode: ReferenceEntity<MedFailoverReturnModeInternalCode>
	{
		#region Constructors

		public MedFailoverReturnMode()
        {
            
        }

        public MedFailoverReturnMode(string code)
            : base(code)
        {
			_medFailoverReturnModeInternalCode = code;
        }
		
		public MedFailoverReturnMode(string code, string description)
            : base(code, description)
        {
			_medFailoverReturnModeInternalCode = code;
        }
        
        public MedFailoverReturnMode(MedFailoverReturnModeInternalCode code)
            : base(code)
        {
			_medFailoverReturnModeInternalCode = code.ToInternalCode();
        }

        public MedFailoverReturnMode(MedFailoverReturnModeInternalCode code, string description)
            : base(code, description)
        {
			_medFailoverReturnModeInternalCode = code.ToInternalCode();
        }

        public static implicit operator MedFailoverReturnMode(MedFailoverReturnModeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static MedFailoverReturnMode FromKey(MedFailoverReturnModeInternalCode internalCode)
        {
            return new MedFailoverReturnMode(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(MedFailoverReturnMode other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as MedFailoverReturnMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(MedFailoverReturnMode left, MedFailoverReturnMode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MedFailoverReturnMode left, MedFailoverReturnMode right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("MedFailoverReturnModeInternalCode")]
		private string _medFailoverReturnModeInternalCode;
		public string MedFailoverReturnModeInternalCode
		{
			get { return _medFailoverReturnModeInternalCode; }
			set { _medFailoverReturnModeInternalCode = value; InternalCode = value.FromInternalCode<MedFailoverReturnModeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region MedItemType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class MedItemType: ReferenceEntity<MedItemTypeInternalCode>
	{
		#region Constructors

		public MedItemType()
        {
            
        }

        public MedItemType(string code)
            : base(code)
        {
			_medItemTypeInternalCode = code;
        }
		
		public MedItemType(string code, string description)
            : base(code, description)
        {
			_medItemTypeInternalCode = code;
        }
        
        public MedItemType(MedItemTypeInternalCode code)
            : base(code)
        {
			_medItemTypeInternalCode = code.ToInternalCode();
        }

        public MedItemType(MedItemTypeInternalCode code, string description)
            : base(code, description)
        {
			_medItemTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator MedItemType(MedItemTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static MedItemType FromKey(MedItemTypeInternalCode internalCode)
        {
            return new MedItemType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(MedItemType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as MedItemType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(MedItemType left, MedItemType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MedItemType left, MedItemType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("MedItemTypeInternalCode")]
		private string _medItemTypeInternalCode;
		public string MedItemTypeInternalCode
		{
			get { return _medItemTypeInternalCode; }
			set { _medItemTypeInternalCode = value; InternalCode = value.FromInternalCode<MedItemTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region MedReturnMode Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class MedReturnMode: ReferenceEntity<MedReturnModeInternalCode>
	{
		#region Constructors

		public MedReturnMode()
        {
            
        }

        public MedReturnMode(string code)
            : base(code)
        {
			_medReturnModeInternalCode = code;
        }
		
		public MedReturnMode(string code, string description)
            : base(code, description)
        {
			_medReturnModeInternalCode = code;
        }
        
        public MedReturnMode(MedReturnModeInternalCode code)
            : base(code)
        {
			_medReturnModeInternalCode = code.ToInternalCode();
        }

        public MedReturnMode(MedReturnModeInternalCode code, string description)
            : base(code, description)
        {
			_medReturnModeInternalCode = code.ToInternalCode();
        }

        public static implicit operator MedReturnMode(MedReturnModeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static MedReturnMode FromKey(MedReturnModeInternalCode internalCode)
        {
            return new MedReturnMode(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(MedReturnMode other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as MedReturnMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(MedReturnMode left, MedReturnMode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MedReturnMode left, MedReturnMode right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("MedReturnModeInternalCode")]
		private string _medReturnModeInternalCode;
		public string MedReturnModeInternalCode
		{
			get { return _medReturnModeInternalCode; }
			set { _medReturnModeInternalCode = value; InternalCode = value.FromInternalCode<MedReturnModeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ReplenishmentScanMode Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ReplenishmentScanMode: ReferenceEntity<ReplenishmentScanModeInternalCode>
	{
		#region Constructors

		public ReplenishmentScanMode()
        {
            
        }

        public ReplenishmentScanMode(string code)
            : base(code)
        {
			_replenishmentScanModeInternalCode = code;
        }
		
		public ReplenishmentScanMode(string code, string description)
            : base(code, description)
        {
			_replenishmentScanModeInternalCode = code;
        }
        
        public ReplenishmentScanMode(ReplenishmentScanModeInternalCode code)
            : base(code)
        {
			_replenishmentScanModeInternalCode = code.ToInternalCode();
        }

        public ReplenishmentScanMode(ReplenishmentScanModeInternalCode code, string description)
            : base(code, description)
        {
			_replenishmentScanModeInternalCode = code.ToInternalCode();
        }

        public static implicit operator ReplenishmentScanMode(ReplenishmentScanModeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ReplenishmentScanMode FromKey(ReplenishmentScanModeInternalCode internalCode)
        {
            return new ReplenishmentScanMode(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ReplenishmentScanMode other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ReplenishmentScanMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ReplenishmentScanMode left, ReplenishmentScanMode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReplenishmentScanMode left, ReplenishmentScanMode right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ReplenishmentScanModeInternalCode")]
		private string _replenishmentScanModeInternalCode;
		public string ReplenishmentScanModeInternalCode
		{
			get { return _replenishmentScanModeInternalCode; }
			set { _replenishmentScanModeInternalCode = value; InternalCode = value.FromInternalCode<ReplenishmentScanModeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ScanProductDeleteReason Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ScanProductDeleteReason: ReferenceEntity<ScanProductDeleteReasonInternalCode>
	{
		#region Constructors

		public ScanProductDeleteReason()
        {
            
        }

        public ScanProductDeleteReason(string code)
            : base(code)
        {
			_scanProductDeleteReasonInternalCode = code;
        }
		
		public ScanProductDeleteReason(string code, string description)
            : base(code, description)
        {
			_scanProductDeleteReasonInternalCode = code;
        }
        
        public ScanProductDeleteReason(ScanProductDeleteReasonInternalCode code)
            : base(code)
        {
			_scanProductDeleteReasonInternalCode = code.ToInternalCode();
        }

        public ScanProductDeleteReason(ScanProductDeleteReasonInternalCode code, string description)
            : base(code, description)
        {
			_scanProductDeleteReasonInternalCode = code.ToInternalCode();
        }

        public static implicit operator ScanProductDeleteReason(ScanProductDeleteReasonInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ScanProductDeleteReason FromKey(ScanProductDeleteReasonInternalCode internalCode)
        {
            return new ScanProductDeleteReason(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ScanProductDeleteReason other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ScanProductDeleteReason);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ScanProductDeleteReason left, ScanProductDeleteReason right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScanProductDeleteReason left, ScanProductDeleteReason right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ScanProductDeleteReasonInternalCode")]
		private string _scanProductDeleteReasonInternalCode;
		public string ScanProductDeleteReasonInternalCode
		{
			get { return _scanProductDeleteReasonInternalCode; }
			set { _scanProductDeleteReasonInternalCode = value; InternalCode = value.FromInternalCode<ScanProductDeleteReasonInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region VerifyCountMode Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class VerifyCountMode: ReferenceEntity<VerifyCountModeInternalCode>
	{
		#region Constructors

		public VerifyCountMode()
        {
            
        }

        public VerifyCountMode(string code)
            : base(code)
        {
			_verifyCountModeInternalCode = code;
        }
		
		public VerifyCountMode(string code, string description)
            : base(code, description)
        {
			_verifyCountModeInternalCode = code;
        }
        
        public VerifyCountMode(VerifyCountModeInternalCode code)
            : base(code)
        {
			_verifyCountModeInternalCode = code.ToInternalCode();
        }

        public VerifyCountMode(VerifyCountModeInternalCode code, string description)
            : base(code, description)
        {
			_verifyCountModeInternalCode = code.ToInternalCode();
        }

        public static implicit operator VerifyCountMode(VerifyCountModeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static VerifyCountMode FromKey(VerifyCountModeInternalCode internalCode)
        {
            return new VerifyCountMode(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(VerifyCountMode other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as VerifyCountMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(VerifyCountMode left, VerifyCountMode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VerifyCountMode left, VerifyCountMode right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("VerifyCountModeInternalCode")]
		private string _verifyCountModeInternalCode;
		public string VerifyCountModeInternalCode
		{
			get { return _verifyCountModeInternalCode; }
			set { _verifyCountModeInternalCode = value; InternalCode = value.FromInternalCode<VerifyCountModeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region AutoDischargeMode Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class AutoDischargeMode: ReferenceEntity<AutoDischargeModeInternalCode>
	{
		#region Constructors

		public AutoDischargeMode()
        {
            
        }

        public AutoDischargeMode(string code)
            : base(code)
        {
			_autoDischargeModeInternalCode = code;
        }
		
		public AutoDischargeMode(string code, string description)
            : base(code, description)
        {
			_autoDischargeModeInternalCode = code;
        }
        
        public AutoDischargeMode(AutoDischargeModeInternalCode code)
            : base(code)
        {
			_autoDischargeModeInternalCode = code.ToInternalCode();
        }

        public AutoDischargeMode(AutoDischargeModeInternalCode code, string description)
            : base(code, description)
        {
			_autoDischargeModeInternalCode = code.ToInternalCode();
        }

        public static implicit operator AutoDischargeMode(AutoDischargeModeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static AutoDischargeMode FromKey(AutoDischargeModeInternalCode internalCode)
        {
            return new AutoDischargeMode(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(AutoDischargeMode other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as AutoDischargeMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(AutoDischargeMode left, AutoDischargeMode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AutoDischargeMode left, AutoDischargeMode right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("AutoDischargeModeInternalCode")]
		private string _autoDischargeModeInternalCode;
		public string AutoDischargeModeInternalCode
		{
			get { return _autoDischargeModeInternalCode; }
			set { _autoDischargeModeInternalCode = value; InternalCode = value.FromInternalCode<AutoDischargeModeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region DestructionBinEmptyWithDiscrepancyMode Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class DestructionBinEmptyWithDiscrepancyMode: ReferenceEntity<DestructionBinEmptyWithDiscrepancyModeInternalCode>
	{
		#region Constructors

		public DestructionBinEmptyWithDiscrepancyMode()
        {
            
        }

        public DestructionBinEmptyWithDiscrepancyMode(string code)
            : base(code)
        {
			_destructionBinEmptyWithDiscrepancyModeInternalCode = code;
        }
		
		public DestructionBinEmptyWithDiscrepancyMode(string code, string description)
            : base(code, description)
        {
			_destructionBinEmptyWithDiscrepancyModeInternalCode = code;
        }
        
        public DestructionBinEmptyWithDiscrepancyMode(DestructionBinEmptyWithDiscrepancyModeInternalCode code)
            : base(code)
        {
			_destructionBinEmptyWithDiscrepancyModeInternalCode = code.ToInternalCode();
        }

        public DestructionBinEmptyWithDiscrepancyMode(DestructionBinEmptyWithDiscrepancyModeInternalCode code, string description)
            : base(code, description)
        {
			_destructionBinEmptyWithDiscrepancyModeInternalCode = code.ToInternalCode();
        }

        public static implicit operator DestructionBinEmptyWithDiscrepancyMode(DestructionBinEmptyWithDiscrepancyModeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static DestructionBinEmptyWithDiscrepancyMode FromKey(DestructionBinEmptyWithDiscrepancyModeInternalCode internalCode)
        {
            return new DestructionBinEmptyWithDiscrepancyMode(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(DestructionBinEmptyWithDiscrepancyMode other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as DestructionBinEmptyWithDiscrepancyMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(DestructionBinEmptyWithDiscrepancyMode left, DestructionBinEmptyWithDiscrepancyMode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DestructionBinEmptyWithDiscrepancyMode left, DestructionBinEmptyWithDiscrepancyMode right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("DestructionBinEmptyWithDiscrepancyModeInternalCode")]
		private string _destructionBinEmptyWithDiscrepancyModeInternalCode;
		public string DestructionBinEmptyWithDiscrepancyModeInternalCode
		{
			get { return _destructionBinEmptyWithDiscrepancyModeInternalCode; }
			set { _destructionBinEmptyWithDiscrepancyModeInternalCode = value; InternalCode = value.FromInternalCode<DestructionBinEmptyWithDiscrepancyModeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region FacilityPatientSiloStatus Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class FacilityPatientSiloStatus: ReferenceEntity<FacilityPatientSiloStatusInternalCode>
	{
		#region Constructors

		public FacilityPatientSiloStatus()
        {
            
        }

        public FacilityPatientSiloStatus(string code)
            : base(code)
        {
			_facilityPatientSiloStatusInternalCode = code;
        }
		
		public FacilityPatientSiloStatus(string code, string description)
            : base(code, description)
        {
			_facilityPatientSiloStatusInternalCode = code;
        }
        
        public FacilityPatientSiloStatus(FacilityPatientSiloStatusInternalCode code)
            : base(code)
        {
			_facilityPatientSiloStatusInternalCode = code.ToInternalCode();
        }

        public FacilityPatientSiloStatus(FacilityPatientSiloStatusInternalCode code, string description)
            : base(code, description)
        {
			_facilityPatientSiloStatusInternalCode = code.ToInternalCode();
        }

        public static implicit operator FacilityPatientSiloStatus(FacilityPatientSiloStatusInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static FacilityPatientSiloStatus FromKey(FacilityPatientSiloStatusInternalCode internalCode)
        {
            return new FacilityPatientSiloStatus(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(FacilityPatientSiloStatus other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as FacilityPatientSiloStatus);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(FacilityPatientSiloStatus left, FacilityPatientSiloStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FacilityPatientSiloStatus left, FacilityPatientSiloStatus right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("FacilityPatientSiloStatusInternalCode")]
		private string _facilityPatientSiloStatusInternalCode;
		public string FacilityPatientSiloStatusInternalCode
		{
			get { return _facilityPatientSiloStatusInternalCode; }
			set { _facilityPatientSiloStatusInternalCode = value; InternalCode = value.FromInternalCode<FacilityPatientSiloStatusInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region LocationType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class LocationType: ReferenceEntity<LocationTypeInternalCode>
	{
		#region Constructors

		public LocationType()
        {
            
        }

        public LocationType(string code)
            : base(code)
        {
			_locationTypeInternalCode = code;
        }
		
		public LocationType(string code, string description)
            : base(code, description)
        {
			_locationTypeInternalCode = code;
        }
        
        public LocationType(LocationTypeInternalCode code)
            : base(code)
        {
			_locationTypeInternalCode = code.ToInternalCode();
        }

        public LocationType(LocationTypeInternalCode code, string description)
            : base(code, description)
        {
			_locationTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator LocationType(LocationTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static LocationType FromKey(LocationTypeInternalCode internalCode)
        {
            return new LocationType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(LocationType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as LocationType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(LocationType left, LocationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LocationType left, LocationType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("LocationTypeInternalCode")]
		private string _locationTypeInternalCode;
		public string LocationTypeInternalCode
		{
			get { return _locationTypeInternalCode; }
			set { _locationTypeInternalCode = value; InternalCode = value.FromInternalCode<LocationTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region NoRecentMessageReceivedType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class NoRecentMessageReceivedType: ReferenceEntity<NoRecentMessageReceivedTypeInternalCode>
	{
		#region Constructors

		public NoRecentMessageReceivedType()
        {
            
        }

        public NoRecentMessageReceivedType(string code)
            : base(code)
        {
			_noRecentMessageReceivedTypeInternalCode = code;
        }
		
		public NoRecentMessageReceivedType(string code, string description)
            : base(code, description)
        {
			_noRecentMessageReceivedTypeInternalCode = code;
        }
        
        public NoRecentMessageReceivedType(NoRecentMessageReceivedTypeInternalCode code)
            : base(code)
        {
			_noRecentMessageReceivedTypeInternalCode = code.ToInternalCode();
        }

        public NoRecentMessageReceivedType(NoRecentMessageReceivedTypeInternalCode code, string description)
            : base(code, description)
        {
			_noRecentMessageReceivedTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator NoRecentMessageReceivedType(NoRecentMessageReceivedTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static NoRecentMessageReceivedType FromKey(NoRecentMessageReceivedTypeInternalCode internalCode)
        {
            return new NoRecentMessageReceivedType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(NoRecentMessageReceivedType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as NoRecentMessageReceivedType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(NoRecentMessageReceivedType left, NoRecentMessageReceivedType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NoRecentMessageReceivedType left, NoRecentMessageReceivedType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("NoRecentMessageReceivedTypeInternalCode")]
		private string _noRecentMessageReceivedTypeInternalCode;
		public string NoRecentMessageReceivedTypeInternalCode
		{
			get { return _noRecentMessageReceivedTypeInternalCode; }
			set { _noRecentMessageReceivedTypeInternalCode = value; InternalCode = value.FromInternalCode<NoRecentMessageReceivedTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region SequentialDrainMode Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SequentialDrainMode: ReferenceEntity<SequentialDrainModeInternalCode>
	{
		#region Constructors

		public SequentialDrainMode()
        {
            
        }

        public SequentialDrainMode(string code)
            : base(code)
        {
			_sequentialDrainModeInternalCode = code;
        }
		
		public SequentialDrainMode(string code, string description)
            : base(code, description)
        {
			_sequentialDrainModeInternalCode = code;
        }
        
        public SequentialDrainMode(SequentialDrainModeInternalCode code)
            : base(code)
        {
			_sequentialDrainModeInternalCode = code.ToInternalCode();
        }

        public SequentialDrainMode(SequentialDrainModeInternalCode code, string description)
            : base(code, description)
        {
			_sequentialDrainModeInternalCode = code.ToInternalCode();
        }

        public static implicit operator SequentialDrainMode(SequentialDrainModeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SequentialDrainMode FromKey(SequentialDrainModeInternalCode internalCode)
        {
            return new SequentialDrainMode(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SequentialDrainMode other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SequentialDrainMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SequentialDrainMode left, SequentialDrainMode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SequentialDrainMode left, SequentialDrainMode right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SequentialDrainModeInternalCode")]
		private string _sequentialDrainModeInternalCode;
		public string SequentialDrainModeInternalCode
		{
			get { return _sequentialDrainModeInternalCode; }
			set { _sequentialDrainModeInternalCode = value; InternalCode = value.FromInternalCode<SequentialDrainModeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region NoticeSeverity Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class NoticeSeverity: ReferenceEntity<NoticeSeverityInternalCode>
	{
		#region Constructors

		public NoticeSeverity()
        {
            
        }

        public NoticeSeverity(string code)
            : base(code)
        {
			_noticeSeverityInternalCode = code;
        }
		
		public NoticeSeverity(string code, string description)
            : base(code, description)
        {
			_noticeSeverityInternalCode = code;
        }
        
        public NoticeSeverity(NoticeSeverityInternalCode code)
            : base(code)
        {
			_noticeSeverityInternalCode = code.ToInternalCode();
        }

        public NoticeSeverity(NoticeSeverityInternalCode code, string description)
            : base(code, description)
        {
			_noticeSeverityInternalCode = code.ToInternalCode();
        }

        public static implicit operator NoticeSeverity(NoticeSeverityInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static NoticeSeverity FromKey(NoticeSeverityInternalCode internalCode)
        {
            return new NoticeSeverity(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(NoticeSeverity other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as NoticeSeverity);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(NoticeSeverity left, NoticeSeverity right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NoticeSeverity left, NoticeSeverity right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("NoticeSeverityInternalCode")]
		private string _noticeSeverityInternalCode;
		public string NoticeSeverityInternalCode
		{
			get { return _noticeSeverityInternalCode; }
			set { _noticeSeverityInternalCode = value; InternalCode = value.FromInternalCode<NoticeSeverityInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region NoticeType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class NoticeType: ReferenceEntity<NoticeTypeInternalCode>
	{
		#region Constructors

		public NoticeType()
        {
            
        }

        public NoticeType(string code)
            : base(code)
        {
			_noticeTypeInternalCode = code;
        }
		
		public NoticeType(string code, string description)
            : base(code, description)
        {
			_noticeTypeInternalCode = code;
        }
        
        public NoticeType(NoticeTypeInternalCode code)
            : base(code)
        {
			_noticeTypeInternalCode = code.ToInternalCode();
        }

        public NoticeType(NoticeTypeInternalCode code, string description)
            : base(code, description)
        {
			_noticeTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator NoticeType(NoticeTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static NoticeType FromKey(NoticeTypeInternalCode internalCode)
        {
            return new NoticeType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(NoticeType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as NoticeType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(NoticeType left, NoticeType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NoticeType left, NoticeType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("NoticeTypeInternalCode")]
		private string _noticeTypeInternalCode;
		public string NoticeTypeInternalCode
		{
			get { return _noticeTypeInternalCode; }
			set { _noticeTypeInternalCode = value; InternalCode = value.FromInternalCode<NoticeTypeInternalCode>(); }
		}

		[DataMember]
		[Column("BusinessDomainInternalCode")]
		public string BusinessDomainInternalCode { get; set; }

		[DataMember]
		[Column("TriggeredByDispensingDeviceFlag")]
		public bool TriggeredByDispensingDevice { get; set; }

		[DataMember]
		[Column("AttentionNoticeFlag")]
		public bool AttentionNotice { get; set; }

		[DataMember]
		[Column("PublishedNoticeFlag")]
		public bool PublishedNotice { get; set; }

		[DataMember]
		[Column("ConfigurableFlag")]
		public bool Configurable { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region PurgeProcessStep Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class PurgeProcessStep: ReferenceEntity<PurgeProcessStepInternalCode>
	{
		#region Constructors

		public PurgeProcessStep()
        {
            
        }

        public PurgeProcessStep(string code)
            : base(code)
        {
			_purgeProcessStepInternalCode = code;
        }
		
		public PurgeProcessStep(string code, string description)
            : base(code, description)
        {
			_purgeProcessStepInternalCode = code;
        }
        
        public PurgeProcessStep(PurgeProcessStepInternalCode code)
            : base(code)
        {
			_purgeProcessStepInternalCode = code.ToInternalCode();
        }

        public PurgeProcessStep(PurgeProcessStepInternalCode code, string description)
            : base(code, description)
        {
			_purgeProcessStepInternalCode = code.ToInternalCode();
        }

        public static implicit operator PurgeProcessStep(PurgeProcessStepInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static PurgeProcessStep FromKey(PurgeProcessStepInternalCode internalCode)
        {
            return new PurgeProcessStep(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(PurgeProcessStep other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as PurgeProcessStep);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(PurgeProcessStep left, PurgeProcessStep right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PurgeProcessStep left, PurgeProcessStep right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("PurgeProcessStepInternalCode")]
		private string _purgeProcessStepInternalCode;
		public string PurgeProcessStepInternalCode
		{
			get { return _purgeProcessStepInternalCode; }
			set { _purgeProcessStepInternalCode = value; InternalCode = value.FromInternalCode<PurgeProcessStepInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region RetentionDuration Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class RetentionDuration: ReferenceEntity<RetentionDurationInternalCode>
	{
		#region Constructors

		public RetentionDuration()
        {
            
        }

        public RetentionDuration(string code)
            : base(code)
        {
			_retentionDurationInternalCode = code;
        }
		
		public RetentionDuration(string code, string description)
            : base(code, description)
        {
			_retentionDurationInternalCode = code;
        }
        
        public RetentionDuration(RetentionDurationInternalCode code)
            : base(code)
        {
			_retentionDurationInternalCode = code.ToInternalCode();
        }

        public RetentionDuration(RetentionDurationInternalCode code, string description)
            : base(code, description)
        {
			_retentionDurationInternalCode = code.ToInternalCode();
        }

        public static implicit operator RetentionDuration(RetentionDurationInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static RetentionDuration FromKey(RetentionDurationInternalCode internalCode)
        {
            return new RetentionDuration(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(RetentionDuration other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as RetentionDuration);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(RetentionDuration left, RetentionDuration right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RetentionDuration left, RetentionDuration right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("RetentionDurationInternalCode")]
		private string _retentionDurationInternalCode;
		public string RetentionDurationInternalCode
		{
			get { return _retentionDurationInternalCode; }
			set { _retentionDurationInternalCode = value; InternalCode = value.FromInternalCode<RetentionDurationInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ReceivedItemListType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ReceivedItemListType: ReferenceEntity<ReceivedItemListTypeInternalCode>
	{
		#region Constructors

		public ReceivedItemListType()
        {
            
        }

        public ReceivedItemListType(string code)
            : base(code)
        {
			_receivedItemListTypeInternalCode = code;
        }
		
		public ReceivedItemListType(string code, string description)
            : base(code, description)
        {
			_receivedItemListTypeInternalCode = code;
        }
        
        public ReceivedItemListType(ReceivedItemListTypeInternalCode code)
            : base(code)
        {
			_receivedItemListTypeInternalCode = code.ToInternalCode();
        }

        public ReceivedItemListType(ReceivedItemListTypeInternalCode code, string description)
            : base(code, description)
        {
			_receivedItemListTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator ReceivedItemListType(ReceivedItemListTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ReceivedItemListType FromKey(ReceivedItemListTypeInternalCode internalCode)
        {
            return new ReceivedItemListType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ReceivedItemListType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ReceivedItemListType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ReceivedItemListType left, ReceivedItemListType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReceivedItemListType left, ReceivedItemListType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ReceivedItemListTypeInternalCode")]
		private string _receivedItemListTypeInternalCode;
		public string ReceivedItemListTypeInternalCode
		{
			get { return _receivedItemListTypeInternalCode; }
			set { _receivedItemListTypeInternalCode = value; InternalCode = value.FromInternalCode<ReceivedItemListTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region SheetType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SheetType: ReferenceEntity<SheetTypeInternalCode>
	{
		#region Constructors

		public SheetType()
        {
            
        }

        public SheetType(string code)
            : base(code)
        {
			_sheetTypeInternalCode = code;
        }
		
		public SheetType(string code, string description)
            : base(code, description)
        {
			_sheetTypeInternalCode = code;
        }
        
        public SheetType(SheetTypeInternalCode code)
            : base(code)
        {
			_sheetTypeInternalCode = code.ToInternalCode();
        }

        public SheetType(SheetTypeInternalCode code, string description)
            : base(code, description)
        {
			_sheetTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator SheetType(SheetTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SheetType FromKey(SheetTypeInternalCode internalCode)
        {
            return new SheetType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SheetType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SheetType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SheetType left, SheetType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SheetType left, SheetType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SheetTypeInternalCode")]
		private string _sheetTypeInternalCode;
		public string SheetTypeInternalCode
		{
			get { return _sheetTypeInternalCode; }
			set { _sheetTypeInternalCode = value; InternalCode = value.FromInternalCode<SheetTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region CommunicationCubeType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class CommunicationCubeType: ReferenceEntity<CommunicationCubeTypeInternalCode>
	{
		#region Constructors

		public CommunicationCubeType()
        {
            
        }

        public CommunicationCubeType(string code)
            : base(code)
        {
			_communicationCubeTypeInternalCode = code;
        }
		
		public CommunicationCubeType(string code, string description)
            : base(code, description)
        {
			_communicationCubeTypeInternalCode = code;
        }
        
        public CommunicationCubeType(CommunicationCubeTypeInternalCode code)
            : base(code)
        {
			_communicationCubeTypeInternalCode = code.ToInternalCode();
        }

        public CommunicationCubeType(CommunicationCubeTypeInternalCode code, string description)
            : base(code, description)
        {
			_communicationCubeTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator CommunicationCubeType(CommunicationCubeTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static CommunicationCubeType FromKey(CommunicationCubeTypeInternalCode internalCode)
        {
            return new CommunicationCubeType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(CommunicationCubeType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as CommunicationCubeType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(CommunicationCubeType left, CommunicationCubeType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CommunicationCubeType left, CommunicationCubeType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("CommunicationCubeTypeInternalCode")]
		private string _communicationCubeTypeInternalCode;
		public string CommunicationCubeTypeInternalCode
		{
			get { return _communicationCubeTypeInternalCode; }
			set { _communicationCubeTypeInternalCode = value; InternalCode = value.FromInternalCode<CommunicationCubeTypeInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region CriticalOverrideModeReason Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class CriticalOverrideModeReason: ReferenceEntity<CriticalOverrideModeReasonInternalCode>
	{
		#region Constructors

		public CriticalOverrideModeReason()
        {
            
        }

        public CriticalOverrideModeReason(string code)
            : base(code)
        {
			_criticalOverrideModeReasonInternalCode = code;
        }
		
		public CriticalOverrideModeReason(string code, string description)
            : base(code, description)
        {
			_criticalOverrideModeReasonInternalCode = code;
        }
        
        public CriticalOverrideModeReason(CriticalOverrideModeReasonInternalCode code)
            : base(code)
        {
			_criticalOverrideModeReasonInternalCode = code.ToInternalCode();
        }

        public CriticalOverrideModeReason(CriticalOverrideModeReasonInternalCode code, string description)
            : base(code, description)
        {
			_criticalOverrideModeReasonInternalCode = code.ToInternalCode();
        }

        public static implicit operator CriticalOverrideModeReason(CriticalOverrideModeReasonInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static CriticalOverrideModeReason FromKey(CriticalOverrideModeReasonInternalCode internalCode)
        {
            return new CriticalOverrideModeReason(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(CriticalOverrideModeReason other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as CriticalOverrideModeReason);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(CriticalOverrideModeReason left, CriticalOverrideModeReason right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CriticalOverrideModeReason left, CriticalOverrideModeReason right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("CriticalOverrideModeReasonInternalCode")]
		private string _criticalOverrideModeReasonInternalCode;
		public string CriticalOverrideModeReasonInternalCode
		{
			get { return _criticalOverrideModeReasonInternalCode; }
			set { _criticalOverrideModeReasonInternalCode = value; InternalCode = value.FromInternalCode<CriticalOverrideModeReasonInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region DispensingDeviceInventoryStatus Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class DispensingDeviceInventoryStatus: ReferenceEntity<DispensingDeviceInventoryStatusInternalCode>
	{
		#region Constructors

		public DispensingDeviceInventoryStatus()
        {
            
        }

        public DispensingDeviceInventoryStatus(string code)
            : base(code)
        {
			_dispensingDeviceInventoryStatusInternalCode = code;
        }
		
		public DispensingDeviceInventoryStatus(string code, string description)
            : base(code, description)
        {
			_dispensingDeviceInventoryStatusInternalCode = code;
        }
        
        public DispensingDeviceInventoryStatus(DispensingDeviceInventoryStatusInternalCode code)
            : base(code)
        {
			_dispensingDeviceInventoryStatusInternalCode = code.ToInternalCode();
        }

        public DispensingDeviceInventoryStatus(DispensingDeviceInventoryStatusInternalCode code, string description)
            : base(code, description)
        {
			_dispensingDeviceInventoryStatusInternalCode = code.ToInternalCode();
        }

        public static implicit operator DispensingDeviceInventoryStatus(DispensingDeviceInventoryStatusInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static DispensingDeviceInventoryStatus FromKey(DispensingDeviceInventoryStatusInternalCode internalCode)
        {
            return new DispensingDeviceInventoryStatus(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(DispensingDeviceInventoryStatus other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as DispensingDeviceInventoryStatus);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(DispensingDeviceInventoryStatus left, DispensingDeviceInventoryStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DispensingDeviceInventoryStatus left, DispensingDeviceInventoryStatus right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("DispensingDeviceInventoryStatusInternalCode")]
		private string _dispensingDeviceInventoryStatusInternalCode;
		public string DispensingDeviceInventoryStatusInternalCode
		{
			get { return _dispensingDeviceInventoryStatusInternalCode; }
			set { _dispensingDeviceInventoryStatusInternalCode = value; InternalCode = value.FromInternalCode<DispensingDeviceInventoryStatusInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region DispensingDeviceType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class DispensingDeviceType: ReferenceEntity<DispensingDeviceTypeInternalCode>
	{
		#region Constructors

		public DispensingDeviceType()
        {
            
        }

        public DispensingDeviceType(string code)
            : base(code)
        {
			_dispensingDeviceTypeInternalCode = code;
        }
		
		public DispensingDeviceType(string code, string description)
            : base(code, description)
        {
			_dispensingDeviceTypeInternalCode = code;
        }
        
        public DispensingDeviceType(DispensingDeviceTypeInternalCode code)
            : base(code)
        {
			_dispensingDeviceTypeInternalCode = code.ToInternalCode();
        }

        public DispensingDeviceType(DispensingDeviceTypeInternalCode code, string description)
            : base(code, description)
        {
			_dispensingDeviceTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator DispensingDeviceType(DispensingDeviceTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static DispensingDeviceType FromKey(DispensingDeviceTypeInternalCode internalCode)
        {
            return new DispensingDeviceType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(DispensingDeviceType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as DispensingDeviceType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(DispensingDeviceType left, DispensingDeviceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DispensingDeviceType left, DispensingDeviceType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("DispensingDeviceTypeInternalCode")]
		private string _dispensingDeviceTypeInternalCode;
		public string DispensingDeviceTypeInternalCode
		{
			get { return _dispensingDeviceTypeInternalCode; }
			set { _dispensingDeviceTypeInternalCode = value; InternalCode = value.FromInternalCode<DispensingDeviceTypeInternalCode>(); }
		}

		#endregion
	}

	#endregion

	#region GCSMCompareReportStandardRange Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class GCSMCompareReportStandardRange: ReferenceEntity<GCSMCompareReportStandardRangeInternalCode>
	{
		#region Constructors

		public GCSMCompareReportStandardRange()
        {
            
        }

        public GCSMCompareReportStandardRange(string code)
            : base(code)
        {
			_gCSMCompareReportStandardRangeInternalCode = code;
        }
		
		public GCSMCompareReportStandardRange(string code, string description)
            : base(code, description)
        {
			_gCSMCompareReportStandardRangeInternalCode = code;
        }
        
        public GCSMCompareReportStandardRange(GCSMCompareReportStandardRangeInternalCode code)
            : base(code)
        {
			_gCSMCompareReportStandardRangeInternalCode = code.ToInternalCode();
        }

        public GCSMCompareReportStandardRange(GCSMCompareReportStandardRangeInternalCode code, string description)
            : base(code, description)
        {
			_gCSMCompareReportStandardRangeInternalCode = code.ToInternalCode();
        }

        public static implicit operator GCSMCompareReportStandardRange(GCSMCompareReportStandardRangeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static GCSMCompareReportStandardRange FromKey(GCSMCompareReportStandardRangeInternalCode internalCode)
        {
            return new GCSMCompareReportStandardRange(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(GCSMCompareReportStandardRange other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as GCSMCompareReportStandardRange);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(GCSMCompareReportStandardRange left, GCSMCompareReportStandardRange right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GCSMCompareReportStandardRange left, GCSMCompareReportStandardRange right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("GCSMCompareReportStandardRangeInternalCode")]
		private string _gCSMCompareReportStandardRangeInternalCode;
		public string GCSMCompareReportStandardRangeInternalCode
		{
			get { return _gCSMCompareReportStandardRangeInternalCode; }
			set { _gCSMCompareReportStandardRangeInternalCode = value; InternalCode = value.FromInternalCode<GCSMCompareReportStandardRangeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region GeneralSystemBusDeviceType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class GeneralSystemBusDeviceType: ReferenceEntity<GeneralSystemBusDeviceTypeInternalCode>
	{
		#region Constructors

		public GeneralSystemBusDeviceType()
        {
            
        }

        public GeneralSystemBusDeviceType(string code)
            : base(code)
        {
			_generalSystemBusDeviceTypeInternalCode = code;
        }
		
		public GeneralSystemBusDeviceType(string code, string description)
            : base(code, description)
        {
			_generalSystemBusDeviceTypeInternalCode = code;
        }
        
        public GeneralSystemBusDeviceType(GeneralSystemBusDeviceTypeInternalCode code)
            : base(code)
        {
			_generalSystemBusDeviceTypeInternalCode = code.ToInternalCode();
        }

        public GeneralSystemBusDeviceType(GeneralSystemBusDeviceTypeInternalCode code, string description)
            : base(code, description)
        {
			_generalSystemBusDeviceTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator GeneralSystemBusDeviceType(GeneralSystemBusDeviceTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static GeneralSystemBusDeviceType FromKey(GeneralSystemBusDeviceTypeInternalCode internalCode)
        {
            return new GeneralSystemBusDeviceType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(GeneralSystemBusDeviceType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as GeneralSystemBusDeviceType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(GeneralSystemBusDeviceType left, GeneralSystemBusDeviceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GeneralSystemBusDeviceType left, GeneralSystemBusDeviceType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("GeneralSystemBusDeviceTypeInternalCode")]
		private string _generalSystemBusDeviceTypeInternalCode;
		public string GeneralSystemBusDeviceTypeInternalCode
		{
			get { return _generalSystemBusDeviceTypeInternalCode; }
			set { _generalSystemBusDeviceTypeInternalCode = value; InternalCode = value.FromInternalCode<GeneralSystemBusDeviceTypeInternalCode>(); }
		}

		[DataMember]
		[Column("DisplayCode")]
		public string DisplayCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region InventoryTransactionRequestError Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class InventoryTransactionRequestError: ReferenceEntity<InventoryTransactionRequestErrorInternalCode>
	{
		#region Constructors

		public InventoryTransactionRequestError()
        {
            
        }

        public InventoryTransactionRequestError(string code)
            : base(code)
        {
			_inventoryTransactionRequestErrorInternalCode = code;
        }
		
		public InventoryTransactionRequestError(string code, string description)
            : base(code, description)
        {
			_inventoryTransactionRequestErrorInternalCode = code;
        }
        
        public InventoryTransactionRequestError(InventoryTransactionRequestErrorInternalCode code)
            : base(code)
        {
			_inventoryTransactionRequestErrorInternalCode = code.ToInternalCode();
        }

        public InventoryTransactionRequestError(InventoryTransactionRequestErrorInternalCode code, string description)
            : base(code, description)
        {
			_inventoryTransactionRequestErrorInternalCode = code.ToInternalCode();
        }

        public static implicit operator InventoryTransactionRequestError(InventoryTransactionRequestErrorInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static InventoryTransactionRequestError FromKey(InventoryTransactionRequestErrorInternalCode internalCode)
        {
            return new InventoryTransactionRequestError(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(InventoryTransactionRequestError other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as InventoryTransactionRequestError);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(InventoryTransactionRequestError left, InventoryTransactionRequestError right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InventoryTransactionRequestError left, InventoryTransactionRequestError right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("InventoryTransactionRequestErrorInternalCode")]
		private string _inventoryTransactionRequestErrorInternalCode;
		public string InventoryTransactionRequestErrorInternalCode
		{
			get { return _inventoryTransactionRequestErrorInternalCode; }
			set { _inventoryTransactionRequestErrorInternalCode = value; InternalCode = value.FromInternalCode<InventoryTransactionRequestErrorInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region InventoryTransactionRequestStatus Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class InventoryTransactionRequestStatus: ReferenceEntity<InventoryTransactionRequestStatusInternalCode>
	{
		#region Constructors

		public InventoryTransactionRequestStatus()
        {
            
        }

        public InventoryTransactionRequestStatus(string code)
            : base(code)
        {
			_inventoryTransactionRequestStatusInternalCode = code;
        }
		
		public InventoryTransactionRequestStatus(string code, string description)
            : base(code, description)
        {
			_inventoryTransactionRequestStatusInternalCode = code;
        }
        
        public InventoryTransactionRequestStatus(InventoryTransactionRequestStatusInternalCode code)
            : base(code)
        {
			_inventoryTransactionRequestStatusInternalCode = code.ToInternalCode();
        }

        public InventoryTransactionRequestStatus(InventoryTransactionRequestStatusInternalCode code, string description)
            : base(code, description)
        {
			_inventoryTransactionRequestStatusInternalCode = code.ToInternalCode();
        }

        public static implicit operator InventoryTransactionRequestStatus(InventoryTransactionRequestStatusInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static InventoryTransactionRequestStatus FromKey(InventoryTransactionRequestStatusInternalCode internalCode)
        {
            return new InventoryTransactionRequestStatus(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(InventoryTransactionRequestStatus other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as InventoryTransactionRequestStatus);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(InventoryTransactionRequestStatus left, InventoryTransactionRequestStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InventoryTransactionRequestStatus left, InventoryTransactionRequestStatus right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("InventoryTransactionRequestStatusInternalCode")]
		private string _inventoryTransactionRequestStatusInternalCode;
		public string InventoryTransactionRequestStatusInternalCode
		{
			get { return _inventoryTransactionRequestStatusInternalCode; }
			set { _inventoryTransactionRequestStatusInternalCode = value; InternalCode = value.FromInternalCode<InventoryTransactionRequestStatusInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region InventoryTransactionRequestType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class InventoryTransactionRequestType: ReferenceEntity<InventoryTransactionRequestTypeInternalCode>
	{
		#region Constructors

		public InventoryTransactionRequestType()
        {
            
        }

        public InventoryTransactionRequestType(string code)
            : base(code)
        {
			_inventoryTransactionRequestTypeInternalCode = code;
        }
		
		public InventoryTransactionRequestType(string code, string description)
            : base(code, description)
        {
			_inventoryTransactionRequestTypeInternalCode = code;
        }
        
        public InventoryTransactionRequestType(InventoryTransactionRequestTypeInternalCode code)
            : base(code)
        {
			_inventoryTransactionRequestTypeInternalCode = code.ToInternalCode();
        }

        public InventoryTransactionRequestType(InventoryTransactionRequestTypeInternalCode code, string description)
            : base(code, description)
        {
			_inventoryTransactionRequestTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator InventoryTransactionRequestType(InventoryTransactionRequestTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static InventoryTransactionRequestType FromKey(InventoryTransactionRequestTypeInternalCode internalCode)
        {
            return new InventoryTransactionRequestType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(InventoryTransactionRequestType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as InventoryTransactionRequestType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(InventoryTransactionRequestType left, InventoryTransactionRequestType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InventoryTransactionRequestType left, InventoryTransactionRequestType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("InventoryTransactionRequestTypeInternalCode")]
		private string _inventoryTransactionRequestTypeInternalCode;
		public string InventoryTransactionRequestTypeInternalCode
		{
			get { return _inventoryTransactionRequestTypeInternalCode; }
			set { _inventoryTransactionRequestTypeInternalCode = value; InternalCode = value.FromInternalCode<InventoryTransactionRequestTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region MiniDrawerTrayMode Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class MiniDrawerTrayMode: ReferenceEntity<MiniDrawerTrayModeInternalCode>
	{
		#region Constructors

		public MiniDrawerTrayMode()
        {
            
        }

        public MiniDrawerTrayMode(string code)
            : base(code)
        {
			_miniDrawerTrayModeInternalCode = code;
        }
		
		public MiniDrawerTrayMode(string code, string description)
            : base(code, description)
        {
			_miniDrawerTrayModeInternalCode = code;
        }
        
        public MiniDrawerTrayMode(MiniDrawerTrayModeInternalCode code)
            : base(code)
        {
			_miniDrawerTrayModeInternalCode = code.ToInternalCode();
        }

        public MiniDrawerTrayMode(MiniDrawerTrayModeInternalCode code, string description)
            : base(code, description)
        {
			_miniDrawerTrayModeInternalCode = code.ToInternalCode();
        }

        public static implicit operator MiniDrawerTrayMode(MiniDrawerTrayModeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static MiniDrawerTrayMode FromKey(MiniDrawerTrayModeInternalCode internalCode)
        {
            return new MiniDrawerTrayMode(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(MiniDrawerTrayMode other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as MiniDrawerTrayMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(MiniDrawerTrayMode left, MiniDrawerTrayMode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MiniDrawerTrayMode left, MiniDrawerTrayMode right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("MiniDrawerTrayModeInternalCode")]
		private string _miniDrawerTrayModeInternalCode;
		public string MiniDrawerTrayModeInternalCode
		{
			get { return _miniDrawerTrayModeInternalCode; }
			set { _miniDrawerTrayModeInternalCode = value; InternalCode = value.FromInternalCode<MiniDrawerTrayModeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region MobileCUBIEEventType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class MobileCUBIEEventType: ReferenceEntity<MobileCUBIEEventTypeInternalCode>
	{
		#region Constructors

		public MobileCUBIEEventType()
        {
            
        }

        public MobileCUBIEEventType(string code)
            : base(code)
        {
			_mobileCUBIEEventTypeInternalCode = code;
        }
		
		public MobileCUBIEEventType(string code, string description)
            : base(code, description)
        {
			_mobileCUBIEEventTypeInternalCode = code;
        }
        
        public MobileCUBIEEventType(MobileCUBIEEventTypeInternalCode code)
            : base(code)
        {
			_mobileCUBIEEventTypeInternalCode = code.ToInternalCode();
        }

        public MobileCUBIEEventType(MobileCUBIEEventTypeInternalCode code, string description)
            : base(code, description)
        {
			_mobileCUBIEEventTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator MobileCUBIEEventType(MobileCUBIEEventTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static MobileCUBIEEventType FromKey(MobileCUBIEEventTypeInternalCode internalCode)
        {
            return new MobileCUBIEEventType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(MobileCUBIEEventType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as MobileCUBIEEventType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(MobileCUBIEEventType left, MobileCUBIEEventType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MobileCUBIEEventType left, MobileCUBIEEventType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("MobileCUBIEEventTypeInternalCode")]
		private string _mobileCUBIEEventTypeInternalCode;
		public string MobileCUBIEEventTypeInternalCode
		{
			get { return _mobileCUBIEEventTypeInternalCode; }
			set { _mobileCUBIEEventTypeInternalCode = value; InternalCode = value.FromInternalCode<MobileCUBIEEventTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ParLevelDirectiveError Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ParLevelDirectiveError: ReferenceEntity<ParLevelDirectiveErrorInternalCode>
	{
		#region Constructors

		public ParLevelDirectiveError()
        {
            
        }

        public ParLevelDirectiveError(string code)
            : base(code)
        {
			_parLevelDirectiveErrorInternalCode = code;
        }
		
		public ParLevelDirectiveError(string code, string description)
            : base(code, description)
        {
			_parLevelDirectiveErrorInternalCode = code;
        }
        
        public ParLevelDirectiveError(ParLevelDirectiveErrorInternalCode code)
            : base(code)
        {
			_parLevelDirectiveErrorInternalCode = code.ToInternalCode();
        }

        public ParLevelDirectiveError(ParLevelDirectiveErrorInternalCode code, string description)
            : base(code, description)
        {
			_parLevelDirectiveErrorInternalCode = code.ToInternalCode();
        }

        public static implicit operator ParLevelDirectiveError(ParLevelDirectiveErrorInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ParLevelDirectiveError FromKey(ParLevelDirectiveErrorInternalCode internalCode)
        {
            return new ParLevelDirectiveError(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ParLevelDirectiveError other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ParLevelDirectiveError);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ParLevelDirectiveError left, ParLevelDirectiveError right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ParLevelDirectiveError left, ParLevelDirectiveError right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ParLevelDirectiveErrorInternalCode")]
		private string _parLevelDirectiveErrorInternalCode;
		public string ParLevelDirectiveErrorInternalCode
		{
			get { return _parLevelDirectiveErrorInternalCode; }
			set { _parLevelDirectiveErrorInternalCode = value; InternalCode = value.FromInternalCode<ParLevelDirectiveErrorInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ParLevelDirectiveStatus Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ParLevelDirectiveStatus: ReferenceEntity<ParLevelDirectiveStatusInternalCode>
	{
		#region Constructors

		public ParLevelDirectiveStatus()
        {
            
        }

        public ParLevelDirectiveStatus(string code)
            : base(code)
        {
			_parLevelDirectiveStatusInternalCode = code;
        }
		
		public ParLevelDirectiveStatus(string code, string description)
            : base(code, description)
        {
			_parLevelDirectiveStatusInternalCode = code;
        }
        
        public ParLevelDirectiveStatus(ParLevelDirectiveStatusInternalCode code)
            : base(code)
        {
			_parLevelDirectiveStatusInternalCode = code.ToInternalCode();
        }

        public ParLevelDirectiveStatus(ParLevelDirectiveStatusInternalCode code, string description)
            : base(code, description)
        {
			_parLevelDirectiveStatusInternalCode = code.ToInternalCode();
        }

        public static implicit operator ParLevelDirectiveStatus(ParLevelDirectiveStatusInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ParLevelDirectiveStatus FromKey(ParLevelDirectiveStatusInternalCode internalCode)
        {
            return new ParLevelDirectiveStatus(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ParLevelDirectiveStatus other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ParLevelDirectiveStatus);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ParLevelDirectiveStatus left, ParLevelDirectiveStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ParLevelDirectiveStatus left, ParLevelDirectiveStatus right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ParLevelDirectiveStatusInternalCode")]
		private string _parLevelDirectiveStatusInternalCode;
		public string ParLevelDirectiveStatusInternalCode
		{
			get { return _parLevelDirectiveStatusInternalCode; }
			set { _parLevelDirectiveStatusInternalCode = value; InternalCode = value.FromInternalCode<ParLevelDirectiveStatusInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region StorageSpaceFailureReason Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class StorageSpaceFailureReason: ReferenceEntity<StorageSpaceFailureReasonInternalCode>
	{
		#region Constructors

		public StorageSpaceFailureReason()
        {
            
        }

        public StorageSpaceFailureReason(string code)
            : base(code)
        {
			_storageSpaceFailureReasonInternalCode = code;
        }
		
		public StorageSpaceFailureReason(string code, string description)
            : base(code, description)
        {
			_storageSpaceFailureReasonInternalCode = code;
        }
        
        public StorageSpaceFailureReason(StorageSpaceFailureReasonInternalCode code)
            : base(code)
        {
			_storageSpaceFailureReasonInternalCode = code.ToInternalCode();
        }

        public StorageSpaceFailureReason(StorageSpaceFailureReasonInternalCode code, string description)
            : base(code, description)
        {
			_storageSpaceFailureReasonInternalCode = code.ToInternalCode();
        }

        public static implicit operator StorageSpaceFailureReason(StorageSpaceFailureReasonInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static StorageSpaceFailureReason FromKey(StorageSpaceFailureReasonInternalCode internalCode)
        {
            return new StorageSpaceFailureReason(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(StorageSpaceFailureReason other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as StorageSpaceFailureReason);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(StorageSpaceFailureReason left, StorageSpaceFailureReason right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StorageSpaceFailureReason left, StorageSpaceFailureReason right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("StorageSpaceFailureReasonInternalCode")]
		private string _storageSpaceFailureReasonInternalCode;
		public string StorageSpaceFailureReasonInternalCode
		{
			get { return _storageSpaceFailureReasonInternalCode; }
			set { _storageSpaceFailureReasonInternalCode = value; InternalCode = value.FromInternalCode<StorageSpaceFailureReasonInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region StorageSpaceItemStatus Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class StorageSpaceItemStatus: ReferenceEntity<StorageSpaceItemStatusInternalCode>
	{
		#region Constructors

		public StorageSpaceItemStatus()
        {
            
        }

        public StorageSpaceItemStatus(string code)
            : base(code)
        {
			_storageSpaceItemStatusInternalCode = code;
        }
		
		public StorageSpaceItemStatus(string code, string description)
            : base(code, description)
        {
			_storageSpaceItemStatusInternalCode = code;
        }
        
        public StorageSpaceItemStatus(StorageSpaceItemStatusInternalCode code)
            : base(code)
        {
			_storageSpaceItemStatusInternalCode = code.ToInternalCode();
        }

        public StorageSpaceItemStatus(StorageSpaceItemStatusInternalCode code, string description)
            : base(code, description)
        {
			_storageSpaceItemStatusInternalCode = code.ToInternalCode();
        }

        public static implicit operator StorageSpaceItemStatus(StorageSpaceItemStatusInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static StorageSpaceItemStatus FromKey(StorageSpaceItemStatusInternalCode internalCode)
        {
            return new StorageSpaceItemStatus(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(StorageSpaceItemStatus other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as StorageSpaceItemStatus);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(StorageSpaceItemStatus left, StorageSpaceItemStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StorageSpaceItemStatus left, StorageSpaceItemStatus right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("StorageSpaceItemStatusInternalCode")]
		private string _storageSpaceItemStatusInternalCode;
		public string StorageSpaceItemStatusInternalCode
		{
			get { return _storageSpaceItemStatusInternalCode; }
			set { _storageSpaceItemStatusInternalCode = value; InternalCode = value.FromInternalCode<StorageSpaceItemStatusInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region StorageSpaceSize Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class StorageSpaceSize: ReferenceEntity<StorageSpaceSizeInternalCode>
	{
		#region Constructors

		public StorageSpaceSize()
        {
            
        }

        public StorageSpaceSize(string code)
            : base(code)
        {
			_storageSpaceSizeInternalCode = code;
        }
		
		public StorageSpaceSize(string code, string description)
            : base(code, description)
        {
			_storageSpaceSizeInternalCode = code;
        }
        
        public StorageSpaceSize(StorageSpaceSizeInternalCode code)
            : base(code)
        {
			_storageSpaceSizeInternalCode = code.ToInternalCode();
        }

        public StorageSpaceSize(StorageSpaceSizeInternalCode code, string description)
            : base(code, description)
        {
			_storageSpaceSizeInternalCode = code.ToInternalCode();
        }

        public static implicit operator StorageSpaceSize(StorageSpaceSizeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static StorageSpaceSize FromKey(StorageSpaceSizeInternalCode internalCode)
        {
            return new StorageSpaceSize(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(StorageSpaceSize other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as StorageSpaceSize);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(StorageSpaceSize left, StorageSpaceSize right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StorageSpaceSize left, StorageSpaceSize right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("StorageSpaceSizeInternalCode")]
		private string _storageSpaceSizeInternalCode;
		public string StorageSpaceSizeInternalCode
		{
			get { return _storageSpaceSizeInternalCode; }
			set { _storageSpaceSizeInternalCode = value; InternalCode = value.FromInternalCode<StorageSpaceSizeInternalCode>(); }
		}

		[DataMember]
		[Column("DisplayCode")]
		public string DisplayCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region StorageSpaceType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class StorageSpaceType: ReferenceEntity<StorageSpaceTypeInternalCode>
	{
		#region Constructors

		public StorageSpaceType()
        {
            
        }

        public StorageSpaceType(string code)
            : base(code)
        {
			_storageSpaceTypeInternalCode = code;
        }
		
		public StorageSpaceType(string code, string description)
            : base(code, description)
        {
			_storageSpaceTypeInternalCode = code;
        }
        
        public StorageSpaceType(StorageSpaceTypeInternalCode code)
            : base(code)
        {
			_storageSpaceTypeInternalCode = code.ToInternalCode();
        }

        public StorageSpaceType(StorageSpaceTypeInternalCode code, string description)
            : base(code, description)
        {
			_storageSpaceTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator StorageSpaceType(StorageSpaceTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static StorageSpaceType FromKey(StorageSpaceTypeInternalCode internalCode)
        {
            return new StorageSpaceType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(StorageSpaceType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as StorageSpaceType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(StorageSpaceType left, StorageSpaceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StorageSpaceType left, StorageSpaceType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("StorageSpaceTypeInternalCode")]
		private string _storageSpaceTypeInternalCode;
		public string StorageSpaceTypeInternalCode
		{
			get { return _storageSpaceTypeInternalCode; }
			set { _storageSpaceTypeInternalCode = value; InternalCode = value.FromInternalCode<StorageSpaceTypeInternalCode>(); }
		}

		[DataMember]
		[Column("ProductGenerationInternalCode")]
		public string ProductGenerationInternalCode { get; set; }

		[DataMember]
		[Column("ShortName")]
		public string ShortName { get; set; }

		[DataMember]
		[Column("TagText")]
		public string Tag { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		[DataMember]
		[Column("DirectlyContainsInventoryFlag")]
		public bool DirectlyContainsInventory { get; set; }

		#endregion
	}

	#endregion

	#region SyncDownloadStatus Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SyncDownloadStatus: ReferenceEntity<SyncDownloadStatusInternalCode>
	{
		#region Constructors

		public SyncDownloadStatus()
        {
            
        }

        public SyncDownloadStatus(string code)
            : base(code)
        {
			_syncDownloadStatusInternalCode = code;
        }
		
		public SyncDownloadStatus(string code, string description)
            : base(code, description)
        {
			_syncDownloadStatusInternalCode = code;
        }
        
        public SyncDownloadStatus(SyncDownloadStatusInternalCode code)
            : base(code)
        {
			_syncDownloadStatusInternalCode = code.ToInternalCode();
        }

        public SyncDownloadStatus(SyncDownloadStatusInternalCode code, string description)
            : base(code, description)
        {
			_syncDownloadStatusInternalCode = code.ToInternalCode();
        }

        public static implicit operator SyncDownloadStatus(SyncDownloadStatusInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SyncDownloadStatus FromKey(SyncDownloadStatusInternalCode internalCode)
        {
            return new SyncDownloadStatus(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SyncDownloadStatus other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SyncDownloadStatus);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SyncDownloadStatus left, SyncDownloadStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SyncDownloadStatus left, SyncDownloadStatus right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SyncDownloadStatusInternalCode")]
		private string _syncDownloadStatusInternalCode;
		public string SyncDownloadStatusInternalCode
		{
			get { return _syncDownloadStatusInternalCode; }
			set { _syncDownloadStatusInternalCode = value; InternalCode = value.FromInternalCode<SyncDownloadStatusInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region SystemBusDeviceType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SystemBusDeviceType: ReferenceEntity<SystemBusDeviceTypeInternalCode>
	{
		#region Constructors

		public SystemBusDeviceType()
        {
            
        }

        public SystemBusDeviceType(string code)
            : base(code)
        {
			_systemBusDeviceTypeInternalCode = code;
        }
		
		public SystemBusDeviceType(string code, string description)
            : base(code, description)
        {
			_systemBusDeviceTypeInternalCode = code;
        }
        
        public SystemBusDeviceType(SystemBusDeviceTypeInternalCode code)
            : base(code)
        {
			_systemBusDeviceTypeInternalCode = code.ToInternalCode();
        }

        public SystemBusDeviceType(SystemBusDeviceTypeInternalCode code, string description)
            : base(code, description)
        {
			_systemBusDeviceTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator SystemBusDeviceType(SystemBusDeviceTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SystemBusDeviceType FromKey(SystemBusDeviceTypeInternalCode internalCode)
        {
            return new SystemBusDeviceType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SystemBusDeviceType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SystemBusDeviceType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SystemBusDeviceType left, SystemBusDeviceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SystemBusDeviceType left, SystemBusDeviceType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SystemBusDeviceTypeInternalCode")]
		private string _systemBusDeviceTypeInternalCode;
		public string SystemBusDeviceTypeInternalCode
		{
			get { return _systemBusDeviceTypeInternalCode; }
			set { _systemBusDeviceTypeInternalCode = value; InternalCode = value.FromInternalCode<SystemBusDeviceTypeInternalCode>(); }
		}

		[DataMember]
		[Column("ProductGenerationInternalCode")]
		public string ProductGenerationInternalCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		[DataMember]
		[Column("GeneralSystemBusDeviceTypeInternalCode")]
		public string GeneralSystemBusDeviceTypeInternalCode { get; set; }

		#endregion
	}

	#endregion

	#region WasteMode Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class WasteMode: ReferenceEntity<WasteModeInternalCode>
	{
		#region Constructors

		public WasteMode()
        {
            
        }

        public WasteMode(string code)
            : base(code)
        {
			_wasteModeInternalCode = code;
        }
		
		public WasteMode(string code, string description)
            : base(code, description)
        {
			_wasteModeInternalCode = code;
        }
        
        public WasteMode(WasteModeInternalCode code)
            : base(code)
        {
			_wasteModeInternalCode = code.ToInternalCode();
        }

        public WasteMode(WasteModeInternalCode code, string description)
            : base(code, description)
        {
			_wasteModeInternalCode = code.ToInternalCode();
        }

        public static implicit operator WasteMode(WasteModeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static WasteMode FromKey(WasteModeInternalCode internalCode)
        {
            return new WasteMode(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(WasteMode other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as WasteMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(WasteMode left, WasteMode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WasteMode left, WasteMode right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("WasteModeInternalCode")]
		private string _wasteModeInternalCode;
		public string WasteModeInternalCode
		{
			get { return _wasteModeInternalCode; }
			set { _wasteModeInternalCode = value; InternalCode = value.FromInternalCode<WasteModeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region DispensingDeviceSyncStateStatus Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class DispensingDeviceSyncStateStatus: ReferenceEntity<DispensingDeviceSyncStateStatusInternalCode>
	{
		#region Constructors

		public DispensingDeviceSyncStateStatus()
        {
            
        }

        public DispensingDeviceSyncStateStatus(string code)
            : base(code)
        {
			_dispensingDeviceSyncStateStatusInternalCode = code;
        }
		
		public DispensingDeviceSyncStateStatus(string code, string description)
            : base(code, description)
        {
			_dispensingDeviceSyncStateStatusInternalCode = code;
        }
        
        public DispensingDeviceSyncStateStatus(DispensingDeviceSyncStateStatusInternalCode code)
            : base(code)
        {
			_dispensingDeviceSyncStateStatusInternalCode = code.ToInternalCode();
        }

        public DispensingDeviceSyncStateStatus(DispensingDeviceSyncStateStatusInternalCode code, string description)
            : base(code, description)
        {
			_dispensingDeviceSyncStateStatusInternalCode = code.ToInternalCode();
        }

        public static implicit operator DispensingDeviceSyncStateStatus(DispensingDeviceSyncStateStatusInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static DispensingDeviceSyncStateStatus FromKey(DispensingDeviceSyncStateStatusInternalCode internalCode)
        {
            return new DispensingDeviceSyncStateStatus(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(DispensingDeviceSyncStateStatus other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as DispensingDeviceSyncStateStatus);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(DispensingDeviceSyncStateStatus left, DispensingDeviceSyncStateStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DispensingDeviceSyncStateStatus left, DispensingDeviceSyncStateStatus right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("DispensingDeviceSyncStateStatusInternalCode")]
		private string _dispensingDeviceSyncStateStatusInternalCode;
		public string DispensingDeviceSyncStateStatusInternalCode
		{
			get { return _dispensingDeviceSyncStateStatusInternalCode; }
			set { _dispensingDeviceSyncStateStatusInternalCode = value; InternalCode = value.FromInternalCode<DispensingDeviceSyncStateStatusInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region SyncTransferStatus Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SyncTransferStatus: ReferenceEntity<SyncTransferStatusInternalCode>
	{
		#region Constructors

		public SyncTransferStatus()
        {
            
        }

        public SyncTransferStatus(string code)
            : base(code)
        {
			_syncTransferStatusInternalCode = code;
        }
		
		public SyncTransferStatus(string code, string description)
            : base(code, description)
        {
			_syncTransferStatusInternalCode = code;
        }
        
        public SyncTransferStatus(SyncTransferStatusInternalCode code)
            : base(code)
        {
			_syncTransferStatusInternalCode = code.ToInternalCode();
        }

        public SyncTransferStatus(SyncTransferStatusInternalCode code, string description)
            : base(code, description)
        {
			_syncTransferStatusInternalCode = code.ToInternalCode();
        }

        public static implicit operator SyncTransferStatus(SyncTransferStatusInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SyncTransferStatus FromKey(SyncTransferStatusInternalCode internalCode)
        {
            return new SyncTransferStatus(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SyncTransferStatus other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SyncTransferStatus);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SyncTransferStatus left, SyncTransferStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SyncTransferStatus left, SyncTransferStatus right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SyncTransferStatusInternalCode")]
		private string _syncTransferStatusInternalCode;
		public string SyncTransferStatusInternalCode
		{
			get { return _syncTransferStatusInternalCode; }
			set { _syncTransferStatusInternalCode = value; InternalCode = value.FromInternalCode<SyncTransferStatusInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region SyncTransferType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class SyncTransferType: ReferenceEntity<SyncTransferTypeInternalCode>
	{
		#region Constructors

		public SyncTransferType()
        {
            
        }

        public SyncTransferType(string code)
            : base(code)
        {
			_syncTransferTypeInternalCode = code;
        }
		
		public SyncTransferType(string code, string description)
            : base(code, description)
        {
			_syncTransferTypeInternalCode = code;
        }
        
        public SyncTransferType(SyncTransferTypeInternalCode code)
            : base(code)
        {
			_syncTransferTypeInternalCode = code.ToInternalCode();
        }

        public SyncTransferType(SyncTransferTypeInternalCode code, string description)
            : base(code, description)
        {
			_syncTransferTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator SyncTransferType(SyncTransferTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static SyncTransferType FromKey(SyncTransferTypeInternalCode internalCode)
        {
            return new SyncTransferType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(SyncTransferType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as SyncTransferType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(SyncTransferType left, SyncTransferType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SyncTransferType left, SyncTransferType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("SyncTransferTypeInternalCode")]
		private string _syncTransferTypeInternalCode;
		public string SyncTransferTypeInternalCode
		{
			get { return _syncTransferTypeInternalCode; }
			set { _syncTransferTypeInternalCode = value; InternalCode = value.FromInternalCode<SyncTransferTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ItemTransactionCompositeRole Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ItemTransactionCompositeRole: ReferenceEntity<ItemTransactionCompositeRoleInternalCode>
	{
		#region Constructors

		public ItemTransactionCompositeRole()
        {
            
        }

        public ItemTransactionCompositeRole(string code)
            : base(code)
        {
			_itemTransactionCompositeRoleInternalCode = code;
        }
		
		public ItemTransactionCompositeRole(string code, string description)
            : base(code, description)
        {
			_itemTransactionCompositeRoleInternalCode = code;
        }
        
        public ItemTransactionCompositeRole(ItemTransactionCompositeRoleInternalCode code)
            : base(code)
        {
			_itemTransactionCompositeRoleInternalCode = code.ToInternalCode();
        }

        public ItemTransactionCompositeRole(ItemTransactionCompositeRoleInternalCode code, string description)
            : base(code, description)
        {
			_itemTransactionCompositeRoleInternalCode = code.ToInternalCode();
        }

        public static implicit operator ItemTransactionCompositeRole(ItemTransactionCompositeRoleInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ItemTransactionCompositeRole FromKey(ItemTransactionCompositeRoleInternalCode internalCode)
        {
            return new ItemTransactionCompositeRole(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ItemTransactionCompositeRole other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ItemTransactionCompositeRole);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ItemTransactionCompositeRole left, ItemTransactionCompositeRole right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ItemTransactionCompositeRole left, ItemTransactionCompositeRole right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ItemTransactionCompositeRoleInternalCode")]
		private string _itemTransactionCompositeRoleInternalCode;
		public string ItemTransactionCompositeRoleInternalCode
		{
			get { return _itemTransactionCompositeRoleInternalCode; }
			set { _itemTransactionCompositeRoleInternalCode = value; InternalCode = value.FromInternalCode<ItemTransactionCompositeRoleInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region ItemTransactionType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class ItemTransactionType: ReferenceEntity<ItemTransactionTypeInternalCode>
	{
		#region Constructors

		public ItemTransactionType()
        {
            
        }

        public ItemTransactionType(string code)
            : base(code)
        {
			_itemTransactionTypeInternalCode = code;
        }
		
		public ItemTransactionType(string code, string description)
            : base(code, description)
        {
			_itemTransactionTypeInternalCode = code;
        }
        
        public ItemTransactionType(ItemTransactionTypeInternalCode code)
            : base(code)
        {
			_itemTransactionTypeInternalCode = code.ToInternalCode();
        }

        public ItemTransactionType(ItemTransactionTypeInternalCode code, string description)
            : base(code, description)
        {
			_itemTransactionTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator ItemTransactionType(ItemTransactionTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static ItemTransactionType FromKey(ItemTransactionTypeInternalCode internalCode)
        {
            return new ItemTransactionType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(ItemTransactionType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as ItemTransactionType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(ItemTransactionType left, ItemTransactionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ItemTransactionType left, ItemTransactionType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("ItemTransactionTypeInternalCode")]
		private string _itemTransactionTypeInternalCode;
		public string ItemTransactionTypeInternalCode
		{
			get { return _itemTransactionTypeInternalCode; }
			set { _itemTransactionTypeInternalCode = value; InternalCode = value.FromInternalCode<ItemTransactionTypeInternalCode>(); }
		}

		[DataMember]
		[Column("MedDescriptionText")]
		public string MedDescription { get; set; }

		[DataMember]
		[Column("SupplyDescriptionText")]
		public string SupplyDescription { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		[DataMember]
		[Column("StorageApplicableFlag")]
		public bool StorageApplicable { get; set; }

		#endregion
	}

	#endregion

	#region MedTransactionSubtype Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class MedTransactionSubtype: ReferenceEntity<MedTransactionSubtypeInternalCode>
	{
		#region Constructors

		public MedTransactionSubtype()
        {
            
        }

        public MedTransactionSubtype(string code)
            : base(code)
        {
			_medTransactionSubtypeInternalCode = code;
        }
		
		public MedTransactionSubtype(string code, string description)
            : base(code, description)
        {
			_medTransactionSubtypeInternalCode = code;
        }
        
        public MedTransactionSubtype(MedTransactionSubtypeInternalCode code)
            : base(code)
        {
			_medTransactionSubtypeInternalCode = code.ToInternalCode();
        }

        public MedTransactionSubtype(MedTransactionSubtypeInternalCode code, string description)
            : base(code, description)
        {
			_medTransactionSubtypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator MedTransactionSubtype(MedTransactionSubtypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static MedTransactionSubtype FromKey(MedTransactionSubtypeInternalCode internalCode)
        {
            return new MedTransactionSubtype(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(MedTransactionSubtype other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as MedTransactionSubtype);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(MedTransactionSubtype left, MedTransactionSubtype right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MedTransactionSubtype left, MedTransactionSubtype right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("MedTransactionSubtypeInternalCode")]
		private string _medTransactionSubtypeInternalCode;
		public string MedTransactionSubtypeInternalCode
		{
			get { return _medTransactionSubtypeInternalCode; }
			set { _medTransactionSubtypeInternalCode = value; InternalCode = value.FromInternalCode<MedTransactionSubtypeInternalCode>(); }
		}

		[DataMember]
		[Column("ItemTransactionTypeInternalCode")]
		public string ItemTransactionTypeInternalCode { get; set; }

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region PaperworkStateStatus Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class PaperworkStateStatus: ReferenceEntity<PaperworkStateStatusInternalCode>
	{
		#region Constructors

		public PaperworkStateStatus()
        {
            
        }

        public PaperworkStateStatus(string code)
            : base(code)
        {
			_paperworkStateStatusInternalCode = code;
        }
		
		public PaperworkStateStatus(string code, string description)
            : base(code, description)
        {
			_paperworkStateStatusInternalCode = code;
        }
        
        public PaperworkStateStatus(PaperworkStateStatusInternalCode code)
            : base(code)
        {
			_paperworkStateStatusInternalCode = code.ToInternalCode();
        }

        public PaperworkStateStatus(PaperworkStateStatusInternalCode code, string description)
            : base(code, description)
        {
			_paperworkStateStatusInternalCode = code.ToInternalCode();
        }

        public static implicit operator PaperworkStateStatus(PaperworkStateStatusInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static PaperworkStateStatus FromKey(PaperworkStateStatusInternalCode internalCode)
        {
            return new PaperworkStateStatus(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(PaperworkStateStatus other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as PaperworkStateStatus);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(PaperworkStateStatus left, PaperworkStateStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaperworkStateStatus left, PaperworkStateStatus right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("PaperworkStateStatusInternalCode")]
		private string _paperworkStateStatusInternalCode;
		public string PaperworkStateStatusInternalCode
		{
			get { return _paperworkStateStatusInternalCode; }
			set { _paperworkStateStatusInternalCode = value; InternalCode = value.FromInternalCode<PaperworkStateStatusInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region TransactionSessionType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class TransactionSessionType: ReferenceEntity<TransactionSessionTypeInternalCode>
	{
		#region Constructors

		public TransactionSessionType()
        {
            
        }

        public TransactionSessionType(string code)
            : base(code)
        {
			_transactionSessionTypeInternalCode = code;
        }
		
		public TransactionSessionType(string code, string description)
            : base(code, description)
        {
			_transactionSessionTypeInternalCode = code;
        }
        
        public TransactionSessionType(TransactionSessionTypeInternalCode code)
            : base(code)
        {
			_transactionSessionTypeInternalCode = code.ToInternalCode();
        }

        public TransactionSessionType(TransactionSessionTypeInternalCode code, string description)
            : base(code, description)
        {
			_transactionSessionTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator TransactionSessionType(TransactionSessionTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static TransactionSessionType FromKey(TransactionSessionTypeInternalCode internalCode)
        {
            return new TransactionSessionType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(TransactionSessionType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as TransactionSessionType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(TransactionSessionType left, TransactionSessionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TransactionSessionType left, TransactionSessionType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("TransactionSessionTypeInternalCode")]
		private string _transactionSessionTypeInternalCode;
		public string TransactionSessionTypeInternalCode
		{
			get { return _transactionSessionTypeInternalCode; }
			set { _transactionSessionTypeInternalCode = value; InternalCode = value.FromInternalCode<TransactionSessionTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region UnloadReason Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class UnloadReason: ReferenceEntity<UnloadReasonInternalCode>
	{
		#region Constructors

		public UnloadReason()
        {
            
        }

        public UnloadReason(string code)
            : base(code)
        {
			_unloadReasonInternalCode = code;
        }
		
		public UnloadReason(string code, string description)
            : base(code, description)
        {
			_unloadReasonInternalCode = code;
        }
        
        public UnloadReason(UnloadReasonInternalCode code)
            : base(code)
        {
			_unloadReasonInternalCode = code.ToInternalCode();
        }

        public UnloadReason(UnloadReasonInternalCode code, string description)
            : base(code, description)
        {
			_unloadReasonInternalCode = code.ToInternalCode();
        }

        public static implicit operator UnloadReason(UnloadReasonInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static UnloadReason FromKey(UnloadReasonInternalCode internalCode)
        {
            return new UnloadReason(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(UnloadReason other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as UnloadReason);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(UnloadReason left, UnloadReason right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UnloadReason left, UnloadReason right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("UnloadReasonInternalCode")]
		private string _unloadReasonInternalCode;
		public string UnloadReasonInternalCode
		{
			get { return _unloadReasonInternalCode; }
			set { _unloadReasonInternalCode = value; InternalCode = value.FromInternalCode<UnloadReasonInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion

	#region UnverifiedScanType Reference Entity

	[Serializable]
	[DataContract(Namespace = ContractConstants.ContractsNamespaceV1)]
	public partial class UnverifiedScanType: ReferenceEntity<UnverifiedScanTypeInternalCode>
	{
		#region Constructors

		public UnverifiedScanType()
        {
            
        }

        public UnverifiedScanType(string code)
            : base(code)
        {
			_unverifiedScanTypeInternalCode = code;
        }
		
		public UnverifiedScanType(string code, string description)
            : base(code, description)
        {
			_unverifiedScanTypeInternalCode = code;
        }
        
        public UnverifiedScanType(UnverifiedScanTypeInternalCode code)
            : base(code)
        {
			_unverifiedScanTypeInternalCode = code.ToInternalCode();
        }

        public UnverifiedScanType(UnverifiedScanTypeInternalCode code, string description)
            : base(code, description)
        {
			_unverifiedScanTypeInternalCode = code.ToInternalCode();
        }

        public static implicit operator UnverifiedScanType(UnverifiedScanTypeInternalCode internalCode)
        {
            return FromKey(internalCode);
        }

        public static UnverifiedScanType FromKey(UnverifiedScanTypeInternalCode internalCode)
        {
            return new UnverifiedScanType(internalCode);
        }

        #endregion
		
        #region Equality Members

        public bool Equals(UnverifiedScanType other)
        {
            return base.Equals(other);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) 
                return false;
            
            if (ReferenceEquals(this, obj)) 
                return true;

            return Equals(obj as UnverifiedScanType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator ==(UnverifiedScanType left, UnverifiedScanType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UnverifiedScanType left, UnverifiedScanType right)
        {
            return !Equals(left, right);
        }

        #endregion

		#region Public Properties

		[DataMember]
		[Column("UnverifiedScanTypeInternalCode")]
		private string _unverifiedScanTypeInternalCode;
		public string UnverifiedScanTypeInternalCode
		{
			get { return _unverifiedScanTypeInternalCode; }
			set { _unverifiedScanTypeInternalCode = value; InternalCode = value.FromInternalCode<UnverifiedScanTypeInternalCode>(); }
		}

		[DataMember]
		[Column("SortValue")]
		public int SortValue { get; set; }

		#endregion
	}

	#endregion
}

#pragma warning restore 1591
